#ifndef SHARED_H
#define SHARED_H

#include "base.h"
#include "blockinfo.h"
#include "task.h"

#define SERVER_PROTOCOL_VERSION (767)

#define SERVER_WORLD_VERSION (3955)

#define SERVER_GAME_VERSION "1.21.1"

#define MAX_BLOCK_STATES (27000)

// NOTE(traks): For now we assume that block states can have at most this number
// of bits. Don't change this! Parts of the code might break if the number of
// bits is larger.
#define MAX_BITS_PER_BLOCK_STATE (16)

#define BITS_PER_BLOCK_STATE (15)
static_assert(BITS_PER_BLOCK_STATE <= MAX_BITS_PER_BLOCK_STATE, "Unsupported bits per block state");

#define MAX_RENDER_DISTANCE (10)

#define MAX_CHUNK_CACHE_RADIUS (MAX_RENDER_DISTANCE + 1)

#define MAX_CHUNK_CACHE_DIAM (2 * MAX_CHUNK_CACHE_RADIUS + 1)

// @TODO(traks) More rapid in case client connection gets flooded and tons of
// TCP packets get buffered/dropped?
#define KEEP_ALIVE_SPACING (10 * 20)

#define KEEP_ALIVE_TIMEOUT (30 * 20)

// TODO(traks): these values shouldn't only be configurable per player, but
// there should be global limits too

// @TODO(traks) Currently chunks sometimes don't want to render when sprint
// flying around in gamemode creative. Increasing this to 4 seems to fix this.
// Why? What is a good value? Should we base it on player network bandwidth?
#define MAX_CHUNK_SENDS_PER_TICK (2)

#define MAX_CHUNK_LOADS_PER_TICK (2)

// must be power of 2
#define MAX_ENTITIES (1024)

#define MAX_PLAYERS (1024)

// whether all play packets should be compressed or not
#define PACKET_COMPRESSION_ENABLED (1)

#define MAX_PLAYER_LOCALE_SIZE (16)

// NOTE(traks): set this to 1 just to get rid of the annoying pop-up
#define ENFORCE_SECURE_CHAT (1)

// NOTE(traks): for block positions: 26 bits X, 26 bits Z, 12 bits Y
// NOTE(traks): for chunk positions: 22 bits X, 22 bits Z
// NOTE(traks): for world ID: 12 bits

#define MAX_WORLD_ID ((1 << 12) - 1)
// TODO(traks): we kind of have to support the vanilla limits, because people
// like building stuff at the very edge. Ideally the world ID + XYZ would all
// fit in a 64-bit value... might need to experiment at some point
#define MIN_WORLD_XZ (-30000000)
#define MAX_WORLD_XZ (29999999)
// @NOTE(traks) must be multiple of 16
#define MIN_WORLD_Y (0 - 64)
// @NOTE(traks) must be 1 less than a multiple of 16
#define MAX_WORLD_Y (255 + 64)
#define WORLD_HEIGHT (MAX_WORLD_Y - MIN_WORLD_Y + 1)

#define MIN_SECTION (MIN_WORLD_Y >> 4)
#define MAX_SECTION (MAX_WORLD_Y >> 4)
#define SECTIONS_PER_CHUNK (MAX_SECTION - MIN_SECTION + 1)
// @NOTE(traks) add 2 for extra section above and below the world
#define LIGHT_SECTIONS_PER_CHUNK (SECTIONS_PER_CHUNK + 2)

// in network id order
enum gamemode {
    GAMEMODE_SURVIVAL,
    GAMEMODE_CREATIVE,
    GAMEMODE_ADVENTURE,
    GAMEMODE_SPECTATOR,
};

// @NOTE(traks) I think of the Minecraft coordinate system as follows:
//
//        +Y
//        |
//        |
//        *---- +X (270 degrees)
//       /
//      /
//     +Z (0 degrees)
//
// Then north naturally corresponds to -Z, east to +X, etc. However, entity
// rotations along the Y axis are the opposite to what you might expect: adding
// degrees rotates clockwise instead of counter-clockwise (as is common in
// mathematics).

// in network id order
enum direction {
    DIRECTION_NEG_Y, // down
    DIRECTION_POS_Y, // up
    DIRECTION_NEG_Z, // north
    DIRECTION_POS_Z, // south
    DIRECTION_NEG_X, // west
    DIRECTION_POS_X, // east
    DIRECTION_ZERO, // not used in network
};

enum axis {
    AXIS_X,
    AXIS_Y,
    AXIS_Z,
};

enum dye_colour {
    DYE_COLOUR_WHITE,
    DYE_COLOUR_ORANGE,
    DYE_COLOUR_MAGENTA,
    DYE_COLOUR_LIGHT_BLUE,
    DYE_COLOUR_YELLOW,
    DYE_COLOUR_LIME,
    DYE_COLOUR_PINK,
    DYE_COLOUR_GRAY,
    DYE_COLOUR_LIGHT_GRAY,
    DYE_COLOUR_CYAN,
    DYE_COLOUR_PURPLE,
    DYE_COLOUR_BLUE,
    DYE_COLOUR_BROWN,
    DYE_COLOUR_GREEN,
    DYE_COLOUR_RED,
    DYE_COLOUR_BLACK,
};

typedef struct {
    i8 x;
    i8 z;
    i16 y;
} CompactChunkBlockPos;

// TODO(traks): add the other block entity types when we're ready
enum block_entity_type {
    BLOCK_ENTITY_NULL,
    BLOCK_ENTITY_BED,
};

typedef struct {
    unsigned char dye_colour;
} block_entity_bed;

#define BLOCK_ENTITY_IN_USE ((unsigned char) (1 << 0))

typedef struct {
    unsigned char type;
    unsigned char flags;
    CompactChunkBlockPos pos;

    union {
        block_entity_bed bed;
    };
} block_entity_base;

typedef struct {
    int type;
    BlockPos pos;
    i32 data;
} level_event;

// NOTE(traks): generated in network order
enum item_type {
    ITEM_AIR,
    ITEM_STONE,
    ITEM_GRANITE,
    ITEM_POLISHED_GRANITE,
    ITEM_DIORITE,
    ITEM_POLISHED_DIORITE,
    ITEM_ANDESITE,
    ITEM_POLISHED_ANDESITE,
    ITEM_DEEPSLATE,
    ITEM_COBBLED_DEEPSLATE,
    ITEM_POLISHED_DEEPSLATE,
    ITEM_CALCITE,
    ITEM_TUFF,
    ITEM_TUFF_SLAB,
    ITEM_TUFF_STAIRS,
    ITEM_TUFF_WALL,
    ITEM_CHISELED_TUFF,
    ITEM_POLISHED_TUFF,
    ITEM_POLISHED_TUFF_SLAB,
    ITEM_POLISHED_TUFF_STAIRS,
    ITEM_POLISHED_TUFF_WALL,
    ITEM_TUFF_BRICKS,
    ITEM_TUFF_BRICK_SLAB,
    ITEM_TUFF_BRICK_STAIRS,
    ITEM_TUFF_BRICK_WALL,
    ITEM_CHISELED_TUFF_BRICKS,
    ITEM_DRIPSTONE_BLOCK,
    ITEM_GRASS_BLOCK,
    ITEM_DIRT,
    ITEM_COARSE_DIRT,
    ITEM_PODZOL,
    ITEM_ROOTED_DIRT,
    ITEM_MUD,
    ITEM_CRIMSON_NYLIUM,
    ITEM_WARPED_NYLIUM,
    ITEM_COBBLESTONE,
    ITEM_OAK_PLANKS,
    ITEM_SPRUCE_PLANKS,
    ITEM_BIRCH_PLANKS,
    ITEM_JUNGLE_PLANKS,
    ITEM_ACACIA_PLANKS,
    ITEM_CHERRY_PLANKS,
    ITEM_DARK_OAK_PLANKS,
    ITEM_MANGROVE_PLANKS,
    ITEM_BAMBOO_PLANKS,
    ITEM_CRIMSON_PLANKS,
    ITEM_WARPED_PLANKS,
    ITEM_BAMBOO_MOSAIC,
    ITEM_OAK_SAPLING,
    ITEM_SPRUCE_SAPLING,
    ITEM_BIRCH_SAPLING,
    ITEM_JUNGLE_SAPLING,
    ITEM_ACACIA_SAPLING,
    ITEM_CHERRY_SAPLING,
    ITEM_DARK_OAK_SAPLING,
    ITEM_MANGROVE_PROPAGULE,
    ITEM_BEDROCK,
    ITEM_SAND,
    ITEM_SUSPICIOUS_SAND,
    ITEM_SUSPICIOUS_GRAVEL,
    ITEM_RED_SAND,
    ITEM_GRAVEL,
    ITEM_COAL_ORE,
    ITEM_DEEPSLATE_COAL_ORE,
    ITEM_IRON_ORE,
    ITEM_DEEPSLATE_IRON_ORE,
    ITEM_COPPER_ORE,
    ITEM_DEEPSLATE_COPPER_ORE,
    ITEM_GOLD_ORE,
    ITEM_DEEPSLATE_GOLD_ORE,
    ITEM_REDSTONE_ORE,
    ITEM_DEEPSLATE_REDSTONE_ORE,
    ITEM_EMERALD_ORE,
    ITEM_DEEPSLATE_EMERALD_ORE,
    ITEM_LAPIS_ORE,
    ITEM_DEEPSLATE_LAPIS_ORE,
    ITEM_DIAMOND_ORE,
    ITEM_DEEPSLATE_DIAMOND_ORE,
    ITEM_NETHER_GOLD_ORE,
    ITEM_NETHER_QUARTZ_ORE,
    ITEM_ANCIENT_DEBRIS,
    ITEM_COAL_BLOCK,
    ITEM_RAW_IRON_BLOCK,
    ITEM_RAW_COPPER_BLOCK,
    ITEM_RAW_GOLD_BLOCK,
    ITEM_HEAVY_CORE,
    ITEM_AMETHYST_BLOCK,
    ITEM_BUDDING_AMETHYST,
    ITEM_IRON_BLOCK,
    ITEM_COPPER_BLOCK,
    ITEM_GOLD_BLOCK,
    ITEM_DIAMOND_BLOCK,
    ITEM_NETHERITE_BLOCK,
    ITEM_EXPOSED_COPPER,
    ITEM_WEATHERED_COPPER,
    ITEM_OXIDIZED_COPPER,
    ITEM_CHISELED_COPPER,
    ITEM_EXPOSED_CHISELED_COPPER,
    ITEM_WEATHERED_CHISELED_COPPER,
    ITEM_OXIDIZED_CHISELED_COPPER,
    ITEM_CUT_COPPER,
    ITEM_EXPOSED_CUT_COPPER,
    ITEM_WEATHERED_CUT_COPPER,
    ITEM_OXIDIZED_CUT_COPPER,
    ITEM_CUT_COPPER_STAIRS,
    ITEM_EXPOSED_CUT_COPPER_STAIRS,
    ITEM_WEATHERED_CUT_COPPER_STAIRS,
    ITEM_OXIDIZED_CUT_COPPER_STAIRS,
    ITEM_CUT_COPPER_SLAB,
    ITEM_EXPOSED_CUT_COPPER_SLAB,
    ITEM_WEATHERED_CUT_COPPER_SLAB,
    ITEM_OXIDIZED_CUT_COPPER_SLAB,
    ITEM_WAXED_COPPER_BLOCK,
    ITEM_WAXED_EXPOSED_COPPER,
    ITEM_WAXED_WEATHERED_COPPER,
    ITEM_WAXED_OXIDIZED_COPPER,
    ITEM_WAXED_CHISELED_COPPER,
    ITEM_WAXED_EXPOSED_CHISELED_COPPER,
    ITEM_WAXED_WEATHERED_CHISELED_COPPER,
    ITEM_WAXED_OXIDIZED_CHISELED_COPPER,
    ITEM_WAXED_CUT_COPPER,
    ITEM_WAXED_EXPOSED_CUT_COPPER,
    ITEM_WAXED_WEATHERED_CUT_COPPER,
    ITEM_WAXED_OXIDIZED_CUT_COPPER,
    ITEM_WAXED_CUT_COPPER_STAIRS,
    ITEM_WAXED_EXPOSED_CUT_COPPER_STAIRS,
    ITEM_WAXED_WEATHERED_CUT_COPPER_STAIRS,
    ITEM_WAXED_OXIDIZED_CUT_COPPER_STAIRS,
    ITEM_WAXED_CUT_COPPER_SLAB,
    ITEM_WAXED_EXPOSED_CUT_COPPER_SLAB,
    ITEM_WAXED_WEATHERED_CUT_COPPER_SLAB,
    ITEM_WAXED_OXIDIZED_CUT_COPPER_SLAB,
    ITEM_OAK_LOG,
    ITEM_SPRUCE_LOG,
    ITEM_BIRCH_LOG,
    ITEM_JUNGLE_LOG,
    ITEM_ACACIA_LOG,
    ITEM_CHERRY_LOG,
    ITEM_DARK_OAK_LOG,
    ITEM_MANGROVE_LOG,
    ITEM_MANGROVE_ROOTS,
    ITEM_MUDDY_MANGROVE_ROOTS,
    ITEM_CRIMSON_STEM,
    ITEM_WARPED_STEM,
    ITEM_BAMBOO_BLOCK,
    ITEM_STRIPPED_OAK_LOG,
    ITEM_STRIPPED_SPRUCE_LOG,
    ITEM_STRIPPED_BIRCH_LOG,
    ITEM_STRIPPED_JUNGLE_LOG,
    ITEM_STRIPPED_ACACIA_LOG,
    ITEM_STRIPPED_CHERRY_LOG,
    ITEM_STRIPPED_DARK_OAK_LOG,
    ITEM_STRIPPED_MANGROVE_LOG,
    ITEM_STRIPPED_CRIMSON_STEM,
    ITEM_STRIPPED_WARPED_STEM,
    ITEM_STRIPPED_OAK_WOOD,
    ITEM_STRIPPED_SPRUCE_WOOD,
    ITEM_STRIPPED_BIRCH_WOOD,
    ITEM_STRIPPED_JUNGLE_WOOD,
    ITEM_STRIPPED_ACACIA_WOOD,
    ITEM_STRIPPED_CHERRY_WOOD,
    ITEM_STRIPPED_DARK_OAK_WOOD,
    ITEM_STRIPPED_MANGROVE_WOOD,
    ITEM_STRIPPED_CRIMSON_HYPHAE,
    ITEM_STRIPPED_WARPED_HYPHAE,
    ITEM_STRIPPED_BAMBOO_BLOCK,
    ITEM_OAK_WOOD,
    ITEM_SPRUCE_WOOD,
    ITEM_BIRCH_WOOD,
    ITEM_JUNGLE_WOOD,
    ITEM_ACACIA_WOOD,
    ITEM_CHERRY_WOOD,
    ITEM_DARK_OAK_WOOD,
    ITEM_MANGROVE_WOOD,
    ITEM_CRIMSON_HYPHAE,
    ITEM_WARPED_HYPHAE,
    ITEM_OAK_LEAVES,
    ITEM_SPRUCE_LEAVES,
    ITEM_BIRCH_LEAVES,
    ITEM_JUNGLE_LEAVES,
    ITEM_ACACIA_LEAVES,
    ITEM_CHERRY_LEAVES,
    ITEM_DARK_OAK_LEAVES,
    ITEM_MANGROVE_LEAVES,
    ITEM_AZALEA_LEAVES,
    ITEM_FLOWERING_AZALEA_LEAVES,
    ITEM_SPONGE,
    ITEM_WET_SPONGE,
    ITEM_GLASS,
    ITEM_TINTED_GLASS,
    ITEM_LAPIS_BLOCK,
    ITEM_SANDSTONE,
    ITEM_CHISELED_SANDSTONE,
    ITEM_CUT_SANDSTONE,
    ITEM_COBWEB,
    ITEM_SHORT_GRASS,
    ITEM_FERN,
    ITEM_AZALEA,
    ITEM_FLOWERING_AZALEA,
    ITEM_DEAD_BUSH,
    ITEM_SEAGRASS,
    ITEM_SEA_PICKLE,
    ITEM_WHITE_WOOL,
    ITEM_ORANGE_WOOL,
    ITEM_MAGENTA_WOOL,
    ITEM_LIGHT_BLUE_WOOL,
    ITEM_YELLOW_WOOL,
    ITEM_LIME_WOOL,
    ITEM_PINK_WOOL,
    ITEM_GRAY_WOOL,
    ITEM_LIGHT_GRAY_WOOL,
    ITEM_CYAN_WOOL,
    ITEM_PURPLE_WOOL,
    ITEM_BLUE_WOOL,
    ITEM_BROWN_WOOL,
    ITEM_GREEN_WOOL,
    ITEM_RED_WOOL,
    ITEM_BLACK_WOOL,
    ITEM_DANDELION,
    ITEM_POPPY,
    ITEM_BLUE_ORCHID,
    ITEM_ALLIUM,
    ITEM_AZURE_BLUET,
    ITEM_RED_TULIP,
    ITEM_ORANGE_TULIP,
    ITEM_WHITE_TULIP,
    ITEM_PINK_TULIP,
    ITEM_OXEYE_DAISY,
    ITEM_CORNFLOWER,
    ITEM_LILY_OF_THE_VALLEY,
    ITEM_WITHER_ROSE,
    ITEM_TORCHFLOWER,
    ITEM_PITCHER_PLANT,
    ITEM_SPORE_BLOSSOM,
    ITEM_BROWN_MUSHROOM,
    ITEM_RED_MUSHROOM,
    ITEM_CRIMSON_FUNGUS,
    ITEM_WARPED_FUNGUS,
    ITEM_CRIMSON_ROOTS,
    ITEM_WARPED_ROOTS,
    ITEM_NETHER_SPROUTS,
    ITEM_WEEPING_VINES,
    ITEM_TWISTING_VINES,
    ITEM_SUGAR_CANE,
    ITEM_KELP,
    ITEM_MOSS_CARPET,
    ITEM_PINK_PETALS,
    ITEM_MOSS_BLOCK,
    ITEM_HANGING_ROOTS,
    ITEM_BIG_DRIPLEAF,
    ITEM_SMALL_DRIPLEAF,
    ITEM_BAMBOO,
    ITEM_OAK_SLAB,
    ITEM_SPRUCE_SLAB,
    ITEM_BIRCH_SLAB,
    ITEM_JUNGLE_SLAB,
    ITEM_ACACIA_SLAB,
    ITEM_CHERRY_SLAB,
    ITEM_DARK_OAK_SLAB,
    ITEM_MANGROVE_SLAB,
    ITEM_BAMBOO_SLAB,
    ITEM_BAMBOO_MOSAIC_SLAB,
    ITEM_CRIMSON_SLAB,
    ITEM_WARPED_SLAB,
    ITEM_STONE_SLAB,
    ITEM_SMOOTH_STONE_SLAB,
    ITEM_SANDSTONE_SLAB,
    ITEM_CUT_SANDSTONE_SLAB,
    ITEM_PETRIFIED_OAK_SLAB,
    ITEM_COBBLESTONE_SLAB,
    ITEM_BRICK_SLAB,
    ITEM_STONE_BRICK_SLAB,
    ITEM_MUD_BRICK_SLAB,
    ITEM_NETHER_BRICK_SLAB,
    ITEM_QUARTZ_SLAB,
    ITEM_RED_SANDSTONE_SLAB,
    ITEM_CUT_RED_SANDSTONE_SLAB,
    ITEM_PURPUR_SLAB,
    ITEM_PRISMARINE_SLAB,
    ITEM_PRISMARINE_BRICK_SLAB,
    ITEM_DARK_PRISMARINE_SLAB,
    ITEM_SMOOTH_QUARTZ,
    ITEM_SMOOTH_RED_SANDSTONE,
    ITEM_SMOOTH_SANDSTONE,
    ITEM_SMOOTH_STONE,
    ITEM_BRICKS,
    ITEM_BOOKSHELF,
    ITEM_CHISELED_BOOKSHELF,
    ITEM_DECORATED_POT,
    ITEM_MOSSY_COBBLESTONE,
    ITEM_OBSIDIAN,
    ITEM_TORCH,
    ITEM_END_ROD,
    ITEM_CHORUS_PLANT,
    ITEM_CHORUS_FLOWER,
    ITEM_PURPUR_BLOCK,
    ITEM_PURPUR_PILLAR,
    ITEM_PURPUR_STAIRS,
    ITEM_SPAWNER,
    ITEM_CHEST,
    ITEM_CRAFTING_TABLE,
    ITEM_FARMLAND,
    ITEM_FURNACE,
    ITEM_LADDER,
    ITEM_COBBLESTONE_STAIRS,
    ITEM_SNOW,
    ITEM_ICE,
    ITEM_SNOW_BLOCK,
    ITEM_CACTUS,
    ITEM_CLAY,
    ITEM_JUKEBOX,
    ITEM_OAK_FENCE,
    ITEM_SPRUCE_FENCE,
    ITEM_BIRCH_FENCE,
    ITEM_JUNGLE_FENCE,
    ITEM_ACACIA_FENCE,
    ITEM_CHERRY_FENCE,
    ITEM_DARK_OAK_FENCE,
    ITEM_MANGROVE_FENCE,
    ITEM_BAMBOO_FENCE,
    ITEM_CRIMSON_FENCE,
    ITEM_WARPED_FENCE,
    ITEM_PUMPKIN,
    ITEM_CARVED_PUMPKIN,
    ITEM_JACK_O_LANTERN,
    ITEM_NETHERRACK,
    ITEM_SOUL_SAND,
    ITEM_SOUL_SOIL,
    ITEM_BASALT,
    ITEM_POLISHED_BASALT,
    ITEM_SMOOTH_BASALT,
    ITEM_SOUL_TORCH,
    ITEM_GLOWSTONE,
    ITEM_INFESTED_STONE,
    ITEM_INFESTED_COBBLESTONE,
    ITEM_INFESTED_STONE_BRICKS,
    ITEM_INFESTED_MOSSY_STONE_BRICKS,
    ITEM_INFESTED_CRACKED_STONE_BRICKS,
    ITEM_INFESTED_CHISELED_STONE_BRICKS,
    ITEM_INFESTED_DEEPSLATE,
    ITEM_STONE_BRICKS,
    ITEM_MOSSY_STONE_BRICKS,
    ITEM_CRACKED_STONE_BRICKS,
    ITEM_CHISELED_STONE_BRICKS,
    ITEM_PACKED_MUD,
    ITEM_MUD_BRICKS,
    ITEM_DEEPSLATE_BRICKS,
    ITEM_CRACKED_DEEPSLATE_BRICKS,
    ITEM_DEEPSLATE_TILES,
    ITEM_CRACKED_DEEPSLATE_TILES,
    ITEM_CHISELED_DEEPSLATE,
    ITEM_REINFORCED_DEEPSLATE,
    ITEM_BROWN_MUSHROOM_BLOCK,
    ITEM_RED_MUSHROOM_BLOCK,
    ITEM_MUSHROOM_STEM,
    ITEM_IRON_BARS,
    ITEM_CHAIN,
    ITEM_GLASS_PANE,
    ITEM_MELON,
    ITEM_VINE,
    ITEM_GLOW_LICHEN,
    ITEM_BRICK_STAIRS,
    ITEM_STONE_BRICK_STAIRS,
    ITEM_MUD_BRICK_STAIRS,
    ITEM_MYCELIUM,
    ITEM_LILY_PAD,
    ITEM_NETHER_BRICKS,
    ITEM_CRACKED_NETHER_BRICKS,
    ITEM_CHISELED_NETHER_BRICKS,
    ITEM_NETHER_BRICK_FENCE,
    ITEM_NETHER_BRICK_STAIRS,
    ITEM_SCULK,
    ITEM_SCULK_VEIN,
    ITEM_SCULK_CATALYST,
    ITEM_SCULK_SHRIEKER,
    ITEM_ENCHANTING_TABLE,
    ITEM_END_PORTAL_FRAME,
    ITEM_END_STONE,
    ITEM_END_STONE_BRICKS,
    ITEM_DRAGON_EGG,
    ITEM_SANDSTONE_STAIRS,
    ITEM_ENDER_CHEST,
    ITEM_EMERALD_BLOCK,
    ITEM_OAK_STAIRS,
    ITEM_SPRUCE_STAIRS,
    ITEM_BIRCH_STAIRS,
    ITEM_JUNGLE_STAIRS,
    ITEM_ACACIA_STAIRS,
    ITEM_CHERRY_STAIRS,
    ITEM_DARK_OAK_STAIRS,
    ITEM_MANGROVE_STAIRS,
    ITEM_BAMBOO_STAIRS,
    ITEM_BAMBOO_MOSAIC_STAIRS,
    ITEM_CRIMSON_STAIRS,
    ITEM_WARPED_STAIRS,
    ITEM_COMMAND_BLOCK,
    ITEM_BEACON,
    ITEM_COBBLESTONE_WALL,
    ITEM_MOSSY_COBBLESTONE_WALL,
    ITEM_BRICK_WALL,
    ITEM_PRISMARINE_WALL,
    ITEM_RED_SANDSTONE_WALL,
    ITEM_MOSSY_STONE_BRICK_WALL,
    ITEM_GRANITE_WALL,
    ITEM_STONE_BRICK_WALL,
    ITEM_MUD_BRICK_WALL,
    ITEM_NETHER_BRICK_WALL,
    ITEM_ANDESITE_WALL,
    ITEM_RED_NETHER_BRICK_WALL,
    ITEM_SANDSTONE_WALL,
    ITEM_END_STONE_BRICK_WALL,
    ITEM_DIORITE_WALL,
    ITEM_BLACKSTONE_WALL,
    ITEM_POLISHED_BLACKSTONE_WALL,
    ITEM_POLISHED_BLACKSTONE_BRICK_WALL,
    ITEM_COBBLED_DEEPSLATE_WALL,
    ITEM_POLISHED_DEEPSLATE_WALL,
    ITEM_DEEPSLATE_BRICK_WALL,
    ITEM_DEEPSLATE_TILE_WALL,
    ITEM_ANVIL,
    ITEM_CHIPPED_ANVIL,
    ITEM_DAMAGED_ANVIL,
    ITEM_CHISELED_QUARTZ_BLOCK,
    ITEM_QUARTZ_BLOCK,
    ITEM_QUARTZ_BRICKS,
    ITEM_QUARTZ_PILLAR,
    ITEM_QUARTZ_STAIRS,
    ITEM_WHITE_TERRACOTTA,
    ITEM_ORANGE_TERRACOTTA,
    ITEM_MAGENTA_TERRACOTTA,
    ITEM_LIGHT_BLUE_TERRACOTTA,
    ITEM_YELLOW_TERRACOTTA,
    ITEM_LIME_TERRACOTTA,
    ITEM_PINK_TERRACOTTA,
    ITEM_GRAY_TERRACOTTA,
    ITEM_LIGHT_GRAY_TERRACOTTA,
    ITEM_CYAN_TERRACOTTA,
    ITEM_PURPLE_TERRACOTTA,
    ITEM_BLUE_TERRACOTTA,
    ITEM_BROWN_TERRACOTTA,
    ITEM_GREEN_TERRACOTTA,
    ITEM_RED_TERRACOTTA,
    ITEM_BLACK_TERRACOTTA,
    ITEM_BARRIER,
    ITEM_LIGHT,
    ITEM_HAY_BLOCK,
    ITEM_WHITE_CARPET,
    ITEM_ORANGE_CARPET,
    ITEM_MAGENTA_CARPET,
    ITEM_LIGHT_BLUE_CARPET,
    ITEM_YELLOW_CARPET,
    ITEM_LIME_CARPET,
    ITEM_PINK_CARPET,
    ITEM_GRAY_CARPET,
    ITEM_LIGHT_GRAY_CARPET,
    ITEM_CYAN_CARPET,
    ITEM_PURPLE_CARPET,
    ITEM_BLUE_CARPET,
    ITEM_BROWN_CARPET,
    ITEM_GREEN_CARPET,
    ITEM_RED_CARPET,
    ITEM_BLACK_CARPET,
    ITEM_TERRACOTTA,
    ITEM_PACKED_ICE,
    ITEM_DIRT_PATH,
    ITEM_SUNFLOWER,
    ITEM_LILAC,
    ITEM_ROSE_BUSH,
    ITEM_PEONY,
    ITEM_TALL_GRASS,
    ITEM_LARGE_FERN,
    ITEM_WHITE_STAINED_GLASS,
    ITEM_ORANGE_STAINED_GLASS,
    ITEM_MAGENTA_STAINED_GLASS,
    ITEM_LIGHT_BLUE_STAINED_GLASS,
    ITEM_YELLOW_STAINED_GLASS,
    ITEM_LIME_STAINED_GLASS,
    ITEM_PINK_STAINED_GLASS,
    ITEM_GRAY_STAINED_GLASS,
    ITEM_LIGHT_GRAY_STAINED_GLASS,
    ITEM_CYAN_STAINED_GLASS,
    ITEM_PURPLE_STAINED_GLASS,
    ITEM_BLUE_STAINED_GLASS,
    ITEM_BROWN_STAINED_GLASS,
    ITEM_GREEN_STAINED_GLASS,
    ITEM_RED_STAINED_GLASS,
    ITEM_BLACK_STAINED_GLASS,
    ITEM_WHITE_STAINED_GLASS_PANE,
    ITEM_ORANGE_STAINED_GLASS_PANE,
    ITEM_MAGENTA_STAINED_GLASS_PANE,
    ITEM_LIGHT_BLUE_STAINED_GLASS_PANE,
    ITEM_YELLOW_STAINED_GLASS_PANE,
    ITEM_LIME_STAINED_GLASS_PANE,
    ITEM_PINK_STAINED_GLASS_PANE,
    ITEM_GRAY_STAINED_GLASS_PANE,
    ITEM_LIGHT_GRAY_STAINED_GLASS_PANE,
    ITEM_CYAN_STAINED_GLASS_PANE,
    ITEM_PURPLE_STAINED_GLASS_PANE,
    ITEM_BLUE_STAINED_GLASS_PANE,
    ITEM_BROWN_STAINED_GLASS_PANE,
    ITEM_GREEN_STAINED_GLASS_PANE,
    ITEM_RED_STAINED_GLASS_PANE,
    ITEM_BLACK_STAINED_GLASS_PANE,
    ITEM_PRISMARINE,
    ITEM_PRISMARINE_BRICKS,
    ITEM_DARK_PRISMARINE,
    ITEM_PRISMARINE_STAIRS,
    ITEM_PRISMARINE_BRICK_STAIRS,
    ITEM_DARK_PRISMARINE_STAIRS,
    ITEM_SEA_LANTERN,
    ITEM_RED_SANDSTONE,
    ITEM_CHISELED_RED_SANDSTONE,
    ITEM_CUT_RED_SANDSTONE,
    ITEM_RED_SANDSTONE_STAIRS,
    ITEM_REPEATING_COMMAND_BLOCK,
    ITEM_CHAIN_COMMAND_BLOCK,
    ITEM_MAGMA_BLOCK,
    ITEM_NETHER_WART_BLOCK,
    ITEM_WARPED_WART_BLOCK,
    ITEM_RED_NETHER_BRICKS,
    ITEM_BONE_BLOCK,
    ITEM_STRUCTURE_VOID,
    ITEM_SHULKER_BOX,
    ITEM_WHITE_SHULKER_BOX,
    ITEM_ORANGE_SHULKER_BOX,
    ITEM_MAGENTA_SHULKER_BOX,
    ITEM_LIGHT_BLUE_SHULKER_BOX,
    ITEM_YELLOW_SHULKER_BOX,
    ITEM_LIME_SHULKER_BOX,
    ITEM_PINK_SHULKER_BOX,
    ITEM_GRAY_SHULKER_BOX,
    ITEM_LIGHT_GRAY_SHULKER_BOX,
    ITEM_CYAN_SHULKER_BOX,
    ITEM_PURPLE_SHULKER_BOX,
    ITEM_BLUE_SHULKER_BOX,
    ITEM_BROWN_SHULKER_BOX,
    ITEM_GREEN_SHULKER_BOX,
    ITEM_RED_SHULKER_BOX,
    ITEM_BLACK_SHULKER_BOX,
    ITEM_WHITE_GLAZED_TERRACOTTA,
    ITEM_ORANGE_GLAZED_TERRACOTTA,
    ITEM_MAGENTA_GLAZED_TERRACOTTA,
    ITEM_LIGHT_BLUE_GLAZED_TERRACOTTA,
    ITEM_YELLOW_GLAZED_TERRACOTTA,
    ITEM_LIME_GLAZED_TERRACOTTA,
    ITEM_PINK_GLAZED_TERRACOTTA,
    ITEM_GRAY_GLAZED_TERRACOTTA,
    ITEM_LIGHT_GRAY_GLAZED_TERRACOTTA,
    ITEM_CYAN_GLAZED_TERRACOTTA,
    ITEM_PURPLE_GLAZED_TERRACOTTA,
    ITEM_BLUE_GLAZED_TERRACOTTA,
    ITEM_BROWN_GLAZED_TERRACOTTA,
    ITEM_GREEN_GLAZED_TERRACOTTA,
    ITEM_RED_GLAZED_TERRACOTTA,
    ITEM_BLACK_GLAZED_TERRACOTTA,
    ITEM_WHITE_CONCRETE,
    ITEM_ORANGE_CONCRETE,
    ITEM_MAGENTA_CONCRETE,
    ITEM_LIGHT_BLUE_CONCRETE,
    ITEM_YELLOW_CONCRETE,
    ITEM_LIME_CONCRETE,
    ITEM_PINK_CONCRETE,
    ITEM_GRAY_CONCRETE,
    ITEM_LIGHT_GRAY_CONCRETE,
    ITEM_CYAN_CONCRETE,
    ITEM_PURPLE_CONCRETE,
    ITEM_BLUE_CONCRETE,
    ITEM_BROWN_CONCRETE,
    ITEM_GREEN_CONCRETE,
    ITEM_RED_CONCRETE,
    ITEM_BLACK_CONCRETE,
    ITEM_WHITE_CONCRETE_POWDER,
    ITEM_ORANGE_CONCRETE_POWDER,
    ITEM_MAGENTA_CONCRETE_POWDER,
    ITEM_LIGHT_BLUE_CONCRETE_POWDER,
    ITEM_YELLOW_CONCRETE_POWDER,
    ITEM_LIME_CONCRETE_POWDER,
    ITEM_PINK_CONCRETE_POWDER,
    ITEM_GRAY_CONCRETE_POWDER,
    ITEM_LIGHT_GRAY_CONCRETE_POWDER,
    ITEM_CYAN_CONCRETE_POWDER,
    ITEM_PURPLE_CONCRETE_POWDER,
    ITEM_BLUE_CONCRETE_POWDER,
    ITEM_BROWN_CONCRETE_POWDER,
    ITEM_GREEN_CONCRETE_POWDER,
    ITEM_RED_CONCRETE_POWDER,
    ITEM_BLACK_CONCRETE_POWDER,
    ITEM_TURTLE_EGG,
    ITEM_SNIFFER_EGG,
    ITEM_DEAD_TUBE_CORAL_BLOCK,
    ITEM_DEAD_BRAIN_CORAL_BLOCK,
    ITEM_DEAD_BUBBLE_CORAL_BLOCK,
    ITEM_DEAD_FIRE_CORAL_BLOCK,
    ITEM_DEAD_HORN_CORAL_BLOCK,
    ITEM_TUBE_CORAL_BLOCK,
    ITEM_BRAIN_CORAL_BLOCK,
    ITEM_BUBBLE_CORAL_BLOCK,
    ITEM_FIRE_CORAL_BLOCK,
    ITEM_HORN_CORAL_BLOCK,
    ITEM_TUBE_CORAL,
    ITEM_BRAIN_CORAL,
    ITEM_BUBBLE_CORAL,
    ITEM_FIRE_CORAL,
    ITEM_HORN_CORAL,
    ITEM_DEAD_BRAIN_CORAL,
    ITEM_DEAD_BUBBLE_CORAL,
    ITEM_DEAD_FIRE_CORAL,
    ITEM_DEAD_HORN_CORAL,
    ITEM_DEAD_TUBE_CORAL,
    ITEM_TUBE_CORAL_FAN,
    ITEM_BRAIN_CORAL_FAN,
    ITEM_BUBBLE_CORAL_FAN,
    ITEM_FIRE_CORAL_FAN,
    ITEM_HORN_CORAL_FAN,
    ITEM_DEAD_TUBE_CORAL_FAN,
    ITEM_DEAD_BRAIN_CORAL_FAN,
    ITEM_DEAD_BUBBLE_CORAL_FAN,
    ITEM_DEAD_FIRE_CORAL_FAN,
    ITEM_DEAD_HORN_CORAL_FAN,
    ITEM_BLUE_ICE,
    ITEM_CONDUIT,
    ITEM_POLISHED_GRANITE_STAIRS,
    ITEM_SMOOTH_RED_SANDSTONE_STAIRS,
    ITEM_MOSSY_STONE_BRICK_STAIRS,
    ITEM_POLISHED_DIORITE_STAIRS,
    ITEM_MOSSY_COBBLESTONE_STAIRS,
    ITEM_END_STONE_BRICK_STAIRS,
    ITEM_STONE_STAIRS,
    ITEM_SMOOTH_SANDSTONE_STAIRS,
    ITEM_SMOOTH_QUARTZ_STAIRS,
    ITEM_GRANITE_STAIRS,
    ITEM_ANDESITE_STAIRS,
    ITEM_RED_NETHER_BRICK_STAIRS,
    ITEM_POLISHED_ANDESITE_STAIRS,
    ITEM_DIORITE_STAIRS,
    ITEM_COBBLED_DEEPSLATE_STAIRS,
    ITEM_POLISHED_DEEPSLATE_STAIRS,
    ITEM_DEEPSLATE_BRICK_STAIRS,
    ITEM_DEEPSLATE_TILE_STAIRS,
    ITEM_POLISHED_GRANITE_SLAB,
    ITEM_SMOOTH_RED_SANDSTONE_SLAB,
    ITEM_MOSSY_STONE_BRICK_SLAB,
    ITEM_POLISHED_DIORITE_SLAB,
    ITEM_MOSSY_COBBLESTONE_SLAB,
    ITEM_END_STONE_BRICK_SLAB,
    ITEM_SMOOTH_SANDSTONE_SLAB,
    ITEM_SMOOTH_QUARTZ_SLAB,
    ITEM_GRANITE_SLAB,
    ITEM_ANDESITE_SLAB,
    ITEM_RED_NETHER_BRICK_SLAB,
    ITEM_POLISHED_ANDESITE_SLAB,
    ITEM_DIORITE_SLAB,
    ITEM_COBBLED_DEEPSLATE_SLAB,
    ITEM_POLISHED_DEEPSLATE_SLAB,
    ITEM_DEEPSLATE_BRICK_SLAB,
    ITEM_DEEPSLATE_TILE_SLAB,
    ITEM_SCAFFOLDING,
    ITEM_REDSTONE,
    ITEM_REDSTONE_TORCH,
    ITEM_REDSTONE_BLOCK,
    ITEM_REPEATER,
    ITEM_COMPARATOR,
    ITEM_PISTON,
    ITEM_STICKY_PISTON,
    ITEM_SLIME_BLOCK,
    ITEM_HONEY_BLOCK,
    ITEM_OBSERVER,
    ITEM_HOPPER,
    ITEM_DISPENSER,
    ITEM_DROPPER,
    ITEM_LECTERN,
    ITEM_TARGET,
    ITEM_LEVER,
    ITEM_LIGHTNING_ROD,
    ITEM_DAYLIGHT_DETECTOR,
    ITEM_SCULK_SENSOR,
    ITEM_CALIBRATED_SCULK_SENSOR,
    ITEM_TRIPWIRE_HOOK,
    ITEM_TRAPPED_CHEST,
    ITEM_TNT,
    ITEM_REDSTONE_LAMP,
    ITEM_NOTE_BLOCK,
    ITEM_STONE_BUTTON,
    ITEM_POLISHED_BLACKSTONE_BUTTON,
    ITEM_OAK_BUTTON,
    ITEM_SPRUCE_BUTTON,
    ITEM_BIRCH_BUTTON,
    ITEM_JUNGLE_BUTTON,
    ITEM_ACACIA_BUTTON,
    ITEM_CHERRY_BUTTON,
    ITEM_DARK_OAK_BUTTON,
    ITEM_MANGROVE_BUTTON,
    ITEM_BAMBOO_BUTTON,
    ITEM_CRIMSON_BUTTON,
    ITEM_WARPED_BUTTON,
    ITEM_STONE_PRESSURE_PLATE,
    ITEM_POLISHED_BLACKSTONE_PRESSURE_PLATE,
    ITEM_LIGHT_WEIGHTED_PRESSURE_PLATE,
    ITEM_HEAVY_WEIGHTED_PRESSURE_PLATE,
    ITEM_OAK_PRESSURE_PLATE,
    ITEM_SPRUCE_PRESSURE_PLATE,
    ITEM_BIRCH_PRESSURE_PLATE,
    ITEM_JUNGLE_PRESSURE_PLATE,
    ITEM_ACACIA_PRESSURE_PLATE,
    ITEM_CHERRY_PRESSURE_PLATE,
    ITEM_DARK_OAK_PRESSURE_PLATE,
    ITEM_MANGROVE_PRESSURE_PLATE,
    ITEM_BAMBOO_PRESSURE_PLATE,
    ITEM_CRIMSON_PRESSURE_PLATE,
    ITEM_WARPED_PRESSURE_PLATE,
    ITEM_IRON_DOOR,
    ITEM_OAK_DOOR,
    ITEM_SPRUCE_DOOR,
    ITEM_BIRCH_DOOR,
    ITEM_JUNGLE_DOOR,
    ITEM_ACACIA_DOOR,
    ITEM_CHERRY_DOOR,
    ITEM_DARK_OAK_DOOR,
    ITEM_MANGROVE_DOOR,
    ITEM_BAMBOO_DOOR,
    ITEM_CRIMSON_DOOR,
    ITEM_WARPED_DOOR,
    ITEM_COPPER_DOOR,
    ITEM_EXPOSED_COPPER_DOOR,
    ITEM_WEATHERED_COPPER_DOOR,
    ITEM_OXIDIZED_COPPER_DOOR,
    ITEM_WAXED_COPPER_DOOR,
    ITEM_WAXED_EXPOSED_COPPER_DOOR,
    ITEM_WAXED_WEATHERED_COPPER_DOOR,
    ITEM_WAXED_OXIDIZED_COPPER_DOOR,
    ITEM_IRON_TRAPDOOR,
    ITEM_OAK_TRAPDOOR,
    ITEM_SPRUCE_TRAPDOOR,
    ITEM_BIRCH_TRAPDOOR,
    ITEM_JUNGLE_TRAPDOOR,
    ITEM_ACACIA_TRAPDOOR,
    ITEM_CHERRY_TRAPDOOR,
    ITEM_DARK_OAK_TRAPDOOR,
    ITEM_MANGROVE_TRAPDOOR,
    ITEM_BAMBOO_TRAPDOOR,
    ITEM_CRIMSON_TRAPDOOR,
    ITEM_WARPED_TRAPDOOR,
    ITEM_COPPER_TRAPDOOR,
    ITEM_EXPOSED_COPPER_TRAPDOOR,
    ITEM_WEATHERED_COPPER_TRAPDOOR,
    ITEM_OXIDIZED_COPPER_TRAPDOOR,
    ITEM_WAXED_COPPER_TRAPDOOR,
    ITEM_WAXED_EXPOSED_COPPER_TRAPDOOR,
    ITEM_WAXED_WEATHERED_COPPER_TRAPDOOR,
    ITEM_WAXED_OXIDIZED_COPPER_TRAPDOOR,
    ITEM_OAK_FENCE_GATE,
    ITEM_SPRUCE_FENCE_GATE,
    ITEM_BIRCH_FENCE_GATE,
    ITEM_JUNGLE_FENCE_GATE,
    ITEM_ACACIA_FENCE_GATE,
    ITEM_CHERRY_FENCE_GATE,
    ITEM_DARK_OAK_FENCE_GATE,
    ITEM_MANGROVE_FENCE_GATE,
    ITEM_BAMBOO_FENCE_GATE,
    ITEM_CRIMSON_FENCE_GATE,
    ITEM_WARPED_FENCE_GATE,
    ITEM_POWERED_RAIL,
    ITEM_DETECTOR_RAIL,
    ITEM_RAIL,
    ITEM_ACTIVATOR_RAIL,
    ITEM_SADDLE,
    ITEM_MINECART,
    ITEM_CHEST_MINECART,
    ITEM_FURNACE_MINECART,
    ITEM_TNT_MINECART,
    ITEM_HOPPER_MINECART,
    ITEM_CARROT_ON_A_STICK,
    ITEM_WARPED_FUNGUS_ON_A_STICK,
    ITEM_ELYTRA,
    ITEM_OAK_BOAT,
    ITEM_OAK_CHEST_BOAT,
    ITEM_SPRUCE_BOAT,
    ITEM_SPRUCE_CHEST_BOAT,
    ITEM_BIRCH_BOAT,
    ITEM_BIRCH_CHEST_BOAT,
    ITEM_JUNGLE_BOAT,
    ITEM_JUNGLE_CHEST_BOAT,
    ITEM_ACACIA_BOAT,
    ITEM_ACACIA_CHEST_BOAT,
    ITEM_CHERRY_BOAT,
    ITEM_CHERRY_CHEST_BOAT,
    ITEM_DARK_OAK_BOAT,
    ITEM_DARK_OAK_CHEST_BOAT,
    ITEM_MANGROVE_BOAT,
    ITEM_MANGROVE_CHEST_BOAT,
    ITEM_BAMBOO_RAFT,
    ITEM_BAMBOO_CHEST_RAFT,
    ITEM_STRUCTURE_BLOCK,
    ITEM_JIGSAW,
    ITEM_TURTLE_HELMET,
    ITEM_TURTLE_SCUTE,
    ITEM_ARMADILLO_SCUTE,
    ITEM_WOLF_ARMOR,
    ITEM_FLINT_AND_STEEL,
    ITEM_BOWL,
    ITEM_APPLE,
    ITEM_BOW,
    ITEM_ARROW,
    ITEM_COAL,
    ITEM_CHARCOAL,
    ITEM_DIAMOND,
    ITEM_EMERALD,
    ITEM_LAPIS_LAZULI,
    ITEM_QUARTZ,
    ITEM_AMETHYST_SHARD,
    ITEM_RAW_IRON,
    ITEM_IRON_INGOT,
    ITEM_RAW_COPPER,
    ITEM_COPPER_INGOT,
    ITEM_RAW_GOLD,
    ITEM_GOLD_INGOT,
    ITEM_NETHERITE_INGOT,
    ITEM_NETHERITE_SCRAP,
    ITEM_WOODEN_SWORD,
    ITEM_WOODEN_SHOVEL,
    ITEM_WOODEN_PICKAXE,
    ITEM_WOODEN_AXE,
    ITEM_WOODEN_HOE,
    ITEM_STONE_SWORD,
    ITEM_STONE_SHOVEL,
    ITEM_STONE_PICKAXE,
    ITEM_STONE_AXE,
    ITEM_STONE_HOE,
    ITEM_GOLDEN_SWORD,
    ITEM_GOLDEN_SHOVEL,
    ITEM_GOLDEN_PICKAXE,
    ITEM_GOLDEN_AXE,
    ITEM_GOLDEN_HOE,
    ITEM_IRON_SWORD,
    ITEM_IRON_SHOVEL,
    ITEM_IRON_PICKAXE,
    ITEM_IRON_AXE,
    ITEM_IRON_HOE,
    ITEM_DIAMOND_SWORD,
    ITEM_DIAMOND_SHOVEL,
    ITEM_DIAMOND_PICKAXE,
    ITEM_DIAMOND_AXE,
    ITEM_DIAMOND_HOE,
    ITEM_NETHERITE_SWORD,
    ITEM_NETHERITE_SHOVEL,
    ITEM_NETHERITE_PICKAXE,
    ITEM_NETHERITE_AXE,
    ITEM_NETHERITE_HOE,
    ITEM_STICK,
    ITEM_MUSHROOM_STEW,
    ITEM_STRING,
    ITEM_FEATHER,
    ITEM_GUNPOWDER,
    ITEM_WHEAT_SEEDS,
    ITEM_WHEAT,
    ITEM_BREAD,
    ITEM_LEATHER_HELMET,
    ITEM_LEATHER_CHESTPLATE,
    ITEM_LEATHER_LEGGINGS,
    ITEM_LEATHER_BOOTS,
    ITEM_CHAINMAIL_HELMET,
    ITEM_CHAINMAIL_CHESTPLATE,
    ITEM_CHAINMAIL_LEGGINGS,
    ITEM_CHAINMAIL_BOOTS,
    ITEM_IRON_HELMET,
    ITEM_IRON_CHESTPLATE,
    ITEM_IRON_LEGGINGS,
    ITEM_IRON_BOOTS,
    ITEM_DIAMOND_HELMET,
    ITEM_DIAMOND_CHESTPLATE,
    ITEM_DIAMOND_LEGGINGS,
    ITEM_DIAMOND_BOOTS,
    ITEM_GOLDEN_HELMET,
    ITEM_GOLDEN_CHESTPLATE,
    ITEM_GOLDEN_LEGGINGS,
    ITEM_GOLDEN_BOOTS,
    ITEM_NETHERITE_HELMET,
    ITEM_NETHERITE_CHESTPLATE,
    ITEM_NETHERITE_LEGGINGS,
    ITEM_NETHERITE_BOOTS,
    ITEM_FLINT,
    ITEM_PORKCHOP,
    ITEM_COOKED_PORKCHOP,
    ITEM_PAINTING,
    ITEM_GOLDEN_APPLE,
    ITEM_ENCHANTED_GOLDEN_APPLE,
    ITEM_OAK_SIGN,
    ITEM_SPRUCE_SIGN,
    ITEM_BIRCH_SIGN,
    ITEM_JUNGLE_SIGN,
    ITEM_ACACIA_SIGN,
    ITEM_CHERRY_SIGN,
    ITEM_DARK_OAK_SIGN,
    ITEM_MANGROVE_SIGN,
    ITEM_BAMBOO_SIGN,
    ITEM_CRIMSON_SIGN,
    ITEM_WARPED_SIGN,
    ITEM_OAK_HANGING_SIGN,
    ITEM_SPRUCE_HANGING_SIGN,
    ITEM_BIRCH_HANGING_SIGN,
    ITEM_JUNGLE_HANGING_SIGN,
    ITEM_ACACIA_HANGING_SIGN,
    ITEM_CHERRY_HANGING_SIGN,
    ITEM_DARK_OAK_HANGING_SIGN,
    ITEM_MANGROVE_HANGING_SIGN,
    ITEM_BAMBOO_HANGING_SIGN,
    ITEM_CRIMSON_HANGING_SIGN,
    ITEM_WARPED_HANGING_SIGN,
    ITEM_BUCKET,
    ITEM_WATER_BUCKET,
    ITEM_LAVA_BUCKET,
    ITEM_POWDER_SNOW_BUCKET,
    ITEM_SNOWBALL,
    ITEM_LEATHER,
    ITEM_MILK_BUCKET,
    ITEM_PUFFERFISH_BUCKET,
    ITEM_SALMON_BUCKET,
    ITEM_COD_BUCKET,
    ITEM_TROPICAL_FISH_BUCKET,
    ITEM_AXOLOTL_BUCKET,
    ITEM_TADPOLE_BUCKET,
    ITEM_BRICK,
    ITEM_CLAY_BALL,
    ITEM_DRIED_KELP_BLOCK,
    ITEM_PAPER,
    ITEM_BOOK,
    ITEM_SLIME_BALL,
    ITEM_EGG,
    ITEM_COMPASS,
    ITEM_RECOVERY_COMPASS,
    ITEM_BUNDLE,
    ITEM_FISHING_ROD,
    ITEM_CLOCK,
    ITEM_SPYGLASS,
    ITEM_GLOWSTONE_DUST,
    ITEM_COD,
    ITEM_SALMON,
    ITEM_TROPICAL_FISH,
    ITEM_PUFFERFISH,
    ITEM_COOKED_COD,
    ITEM_COOKED_SALMON,
    ITEM_INK_SAC,
    ITEM_GLOW_INK_SAC,
    ITEM_COCOA_BEANS,
    ITEM_WHITE_DYE,
    ITEM_ORANGE_DYE,
    ITEM_MAGENTA_DYE,
    ITEM_LIGHT_BLUE_DYE,
    ITEM_YELLOW_DYE,
    ITEM_LIME_DYE,
    ITEM_PINK_DYE,
    ITEM_GRAY_DYE,
    ITEM_LIGHT_GRAY_DYE,
    ITEM_CYAN_DYE,
    ITEM_PURPLE_DYE,
    ITEM_BLUE_DYE,
    ITEM_BROWN_DYE,
    ITEM_GREEN_DYE,
    ITEM_RED_DYE,
    ITEM_BLACK_DYE,
    ITEM_BONE_MEAL,
    ITEM_BONE,
    ITEM_SUGAR,
    ITEM_CAKE,
    ITEM_WHITE_BED,
    ITEM_ORANGE_BED,
    ITEM_MAGENTA_BED,
    ITEM_LIGHT_BLUE_BED,
    ITEM_YELLOW_BED,
    ITEM_LIME_BED,
    ITEM_PINK_BED,
    ITEM_GRAY_BED,
    ITEM_LIGHT_GRAY_BED,
    ITEM_CYAN_BED,
    ITEM_PURPLE_BED,
    ITEM_BLUE_BED,
    ITEM_BROWN_BED,
    ITEM_GREEN_BED,
    ITEM_RED_BED,
    ITEM_BLACK_BED,
    ITEM_COOKIE,
    ITEM_CRAFTER,
    ITEM_FILLED_MAP,
    ITEM_SHEARS,
    ITEM_MELON_SLICE,
    ITEM_DRIED_KELP,
    ITEM_PUMPKIN_SEEDS,
    ITEM_MELON_SEEDS,
    ITEM_BEEF,
    ITEM_COOKED_BEEF,
    ITEM_CHICKEN,
    ITEM_COOKED_CHICKEN,
    ITEM_ROTTEN_FLESH,
    ITEM_ENDER_PEARL,
    ITEM_BLAZE_ROD,
    ITEM_GHAST_TEAR,
    ITEM_GOLD_NUGGET,
    ITEM_NETHER_WART,
    ITEM_POTION,
    ITEM_GLASS_BOTTLE,
    ITEM_SPIDER_EYE,
    ITEM_FERMENTED_SPIDER_EYE,
    ITEM_BLAZE_POWDER,
    ITEM_MAGMA_CREAM,
    ITEM_BREWING_STAND,
    ITEM_CAULDRON,
    ITEM_ENDER_EYE,
    ITEM_GLISTERING_MELON_SLICE,
    ITEM_ARMADILLO_SPAWN_EGG,
    ITEM_ALLAY_SPAWN_EGG,
    ITEM_AXOLOTL_SPAWN_EGG,
    ITEM_BAT_SPAWN_EGG,
    ITEM_BEE_SPAWN_EGG,
    ITEM_BLAZE_SPAWN_EGG,
    ITEM_BOGGED_SPAWN_EGG,
    ITEM_BREEZE_SPAWN_EGG,
    ITEM_CAT_SPAWN_EGG,
    ITEM_CAMEL_SPAWN_EGG,
    ITEM_CAVE_SPIDER_SPAWN_EGG,
    ITEM_CHICKEN_SPAWN_EGG,
    ITEM_COD_SPAWN_EGG,
    ITEM_COW_SPAWN_EGG,
    ITEM_CREEPER_SPAWN_EGG,
    ITEM_DOLPHIN_SPAWN_EGG,
    ITEM_DONKEY_SPAWN_EGG,
    ITEM_DROWNED_SPAWN_EGG,
    ITEM_ELDER_GUARDIAN_SPAWN_EGG,
    ITEM_ENDER_DRAGON_SPAWN_EGG,
    ITEM_ENDERMAN_SPAWN_EGG,
    ITEM_ENDERMITE_SPAWN_EGG,
    ITEM_EVOKER_SPAWN_EGG,
    ITEM_FOX_SPAWN_EGG,
    ITEM_FROG_SPAWN_EGG,
    ITEM_GHAST_SPAWN_EGG,
    ITEM_GLOW_SQUID_SPAWN_EGG,
    ITEM_GOAT_SPAWN_EGG,
    ITEM_GUARDIAN_SPAWN_EGG,
    ITEM_HOGLIN_SPAWN_EGG,
    ITEM_HORSE_SPAWN_EGG,
    ITEM_HUSK_SPAWN_EGG,
    ITEM_IRON_GOLEM_SPAWN_EGG,
    ITEM_LLAMA_SPAWN_EGG,
    ITEM_MAGMA_CUBE_SPAWN_EGG,
    ITEM_MOOSHROOM_SPAWN_EGG,
    ITEM_MULE_SPAWN_EGG,
    ITEM_OCELOT_SPAWN_EGG,
    ITEM_PANDA_SPAWN_EGG,
    ITEM_PARROT_SPAWN_EGG,
    ITEM_PHANTOM_SPAWN_EGG,
    ITEM_PIG_SPAWN_EGG,
    ITEM_PIGLIN_SPAWN_EGG,
    ITEM_PIGLIN_BRUTE_SPAWN_EGG,
    ITEM_PILLAGER_SPAWN_EGG,
    ITEM_POLAR_BEAR_SPAWN_EGG,
    ITEM_PUFFERFISH_SPAWN_EGG,
    ITEM_RABBIT_SPAWN_EGG,
    ITEM_RAVAGER_SPAWN_EGG,
    ITEM_SALMON_SPAWN_EGG,
    ITEM_SHEEP_SPAWN_EGG,
    ITEM_SHULKER_SPAWN_EGG,
    ITEM_SILVERFISH_SPAWN_EGG,
    ITEM_SKELETON_SPAWN_EGG,
    ITEM_SKELETON_HORSE_SPAWN_EGG,
    ITEM_SLIME_SPAWN_EGG,
    ITEM_SNIFFER_SPAWN_EGG,
    ITEM_SNOW_GOLEM_SPAWN_EGG,
    ITEM_SPIDER_SPAWN_EGG,
    ITEM_SQUID_SPAWN_EGG,
    ITEM_STRAY_SPAWN_EGG,
    ITEM_STRIDER_SPAWN_EGG,
    ITEM_TADPOLE_SPAWN_EGG,
    ITEM_TRADER_LLAMA_SPAWN_EGG,
    ITEM_TROPICAL_FISH_SPAWN_EGG,
    ITEM_TURTLE_SPAWN_EGG,
    ITEM_VEX_SPAWN_EGG,
    ITEM_VILLAGER_SPAWN_EGG,
    ITEM_VINDICATOR_SPAWN_EGG,
    ITEM_WANDERING_TRADER_SPAWN_EGG,
    ITEM_WARDEN_SPAWN_EGG,
    ITEM_WITCH_SPAWN_EGG,
    ITEM_WITHER_SPAWN_EGG,
    ITEM_WITHER_SKELETON_SPAWN_EGG,
    ITEM_WOLF_SPAWN_EGG,
    ITEM_ZOGLIN_SPAWN_EGG,
    ITEM_ZOMBIE_SPAWN_EGG,
    ITEM_ZOMBIE_HORSE_SPAWN_EGG,
    ITEM_ZOMBIE_VILLAGER_SPAWN_EGG,
    ITEM_ZOMBIFIED_PIGLIN_SPAWN_EGG,
    ITEM_EXPERIENCE_BOTTLE,
    ITEM_FIRE_CHARGE,
    ITEM_WIND_CHARGE,
    ITEM_WRITABLE_BOOK,
    ITEM_WRITTEN_BOOK,
    ITEM_MACE,
    ITEM_ITEM_FRAME,
    ITEM_GLOW_ITEM_FRAME,
    ITEM_FLOWER_POT,
    ITEM_CARROT,
    ITEM_POTATO,
    ITEM_BAKED_POTATO,
    ITEM_POISONOUS_POTATO,
    ITEM_MAP,
    ITEM_GOLDEN_CARROT,
    ITEM_SKELETON_SKULL,
    ITEM_WITHER_SKELETON_SKULL,
    ITEM_PLAYER_HEAD,
    ITEM_ZOMBIE_HEAD,
    ITEM_CREEPER_HEAD,
    ITEM_DRAGON_HEAD,
    ITEM_PIGLIN_HEAD,
    ITEM_NETHER_STAR,
    ITEM_PUMPKIN_PIE,
    ITEM_FIREWORK_ROCKET,
    ITEM_FIREWORK_STAR,
    ITEM_ENCHANTED_BOOK,
    ITEM_NETHER_BRICK,
    ITEM_PRISMARINE_SHARD,
    ITEM_PRISMARINE_CRYSTALS,
    ITEM_RABBIT,
    ITEM_COOKED_RABBIT,
    ITEM_RABBIT_STEW,
    ITEM_RABBIT_FOOT,
    ITEM_RABBIT_HIDE,
    ITEM_ARMOR_STAND,
    ITEM_IRON_HORSE_ARMOR,
    ITEM_GOLDEN_HORSE_ARMOR,
    ITEM_DIAMOND_HORSE_ARMOR,
    ITEM_LEATHER_HORSE_ARMOR,
    ITEM_LEAD,
    ITEM_NAME_TAG,
    ITEM_COMMAND_BLOCK_MINECART,
    ITEM_MUTTON,
    ITEM_COOKED_MUTTON,
    ITEM_WHITE_BANNER,
    ITEM_ORANGE_BANNER,
    ITEM_MAGENTA_BANNER,
    ITEM_LIGHT_BLUE_BANNER,
    ITEM_YELLOW_BANNER,
    ITEM_LIME_BANNER,
    ITEM_PINK_BANNER,
    ITEM_GRAY_BANNER,
    ITEM_LIGHT_GRAY_BANNER,
    ITEM_CYAN_BANNER,
    ITEM_PURPLE_BANNER,
    ITEM_BLUE_BANNER,
    ITEM_BROWN_BANNER,
    ITEM_GREEN_BANNER,
    ITEM_RED_BANNER,
    ITEM_BLACK_BANNER,
    ITEM_END_CRYSTAL,
    ITEM_CHORUS_FRUIT,
    ITEM_POPPED_CHORUS_FRUIT,
    ITEM_TORCHFLOWER_SEEDS,
    ITEM_PITCHER_POD,
    ITEM_BEETROOT,
    ITEM_BEETROOT_SEEDS,
    ITEM_BEETROOT_SOUP,
    ITEM_DRAGON_BREATH,
    ITEM_SPLASH_POTION,
    ITEM_SPECTRAL_ARROW,
    ITEM_TIPPED_ARROW,
    ITEM_LINGERING_POTION,
    ITEM_SHIELD,
    ITEM_TOTEM_OF_UNDYING,
    ITEM_SHULKER_SHELL,
    ITEM_IRON_NUGGET,
    ITEM_KNOWLEDGE_BOOK,
    ITEM_DEBUG_STICK,
    ITEM_MUSIC_DISC_13,
    ITEM_MUSIC_DISC_CAT,
    ITEM_MUSIC_DISC_BLOCKS,
    ITEM_MUSIC_DISC_CHIRP,
    ITEM_MUSIC_DISC_CREATOR,
    ITEM_MUSIC_DISC_CREATOR_MUSIC_BOX,
    ITEM_MUSIC_DISC_FAR,
    ITEM_MUSIC_DISC_MALL,
    ITEM_MUSIC_DISC_MELLOHI,
    ITEM_MUSIC_DISC_STAL,
    ITEM_MUSIC_DISC_STRAD,
    ITEM_MUSIC_DISC_WARD,
    ITEM_MUSIC_DISC_11,
    ITEM_MUSIC_DISC_WAIT,
    ITEM_MUSIC_DISC_OTHERSIDE,
    ITEM_MUSIC_DISC_RELIC,
    ITEM_MUSIC_DISC_5,
    ITEM_MUSIC_DISC_PIGSTEP,
    ITEM_MUSIC_DISC_PRECIPICE,
    ITEM_DISC_FRAGMENT_5,
    ITEM_TRIDENT,
    ITEM_PHANTOM_MEMBRANE,
    ITEM_NAUTILUS_SHELL,
    ITEM_HEART_OF_THE_SEA,
    ITEM_CROSSBOW,
    ITEM_SUSPICIOUS_STEW,
    ITEM_LOOM,
    ITEM_FLOWER_BANNER_PATTERN,
    ITEM_CREEPER_BANNER_PATTERN,
    ITEM_SKULL_BANNER_PATTERN,
    ITEM_MOJANG_BANNER_PATTERN,
    ITEM_GLOBE_BANNER_PATTERN,
    ITEM_PIGLIN_BANNER_PATTERN,
    ITEM_FLOW_BANNER_PATTERN,
    ITEM_GUSTER_BANNER_PATTERN,
    ITEM_GOAT_HORN,
    ITEM_COMPOSTER,
    ITEM_BARREL,
    ITEM_SMOKER,
    ITEM_BLAST_FURNACE,
    ITEM_CARTOGRAPHY_TABLE,
    ITEM_FLETCHING_TABLE,
    ITEM_GRINDSTONE,
    ITEM_SMITHING_TABLE,
    ITEM_STONECUTTER,
    ITEM_BELL,
    ITEM_LANTERN,
    ITEM_SOUL_LANTERN,
    ITEM_SWEET_BERRIES,
    ITEM_GLOW_BERRIES,
    ITEM_CAMPFIRE,
    ITEM_SOUL_CAMPFIRE,
    ITEM_SHROOMLIGHT,
    ITEM_HONEYCOMB,
    ITEM_BEE_NEST,
    ITEM_BEEHIVE,
    ITEM_HONEY_BOTTLE,
    ITEM_HONEYCOMB_BLOCK,
    ITEM_LODESTONE,
    ITEM_CRYING_OBSIDIAN,
    ITEM_BLACKSTONE,
    ITEM_BLACKSTONE_SLAB,
    ITEM_BLACKSTONE_STAIRS,
    ITEM_GILDED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE_SLAB,
    ITEM_POLISHED_BLACKSTONE_STAIRS,
    ITEM_CHISELED_POLISHED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE_BRICKS,
    ITEM_POLISHED_BLACKSTONE_BRICK_SLAB,
    ITEM_POLISHED_BLACKSTONE_BRICK_STAIRS,
    ITEM_CRACKED_POLISHED_BLACKSTONE_BRICKS,
    ITEM_RESPAWN_ANCHOR,
    ITEM_CANDLE,
    ITEM_WHITE_CANDLE,
    ITEM_ORANGE_CANDLE,
    ITEM_MAGENTA_CANDLE,
    ITEM_LIGHT_BLUE_CANDLE,
    ITEM_YELLOW_CANDLE,
    ITEM_LIME_CANDLE,
    ITEM_PINK_CANDLE,
    ITEM_GRAY_CANDLE,
    ITEM_LIGHT_GRAY_CANDLE,
    ITEM_CYAN_CANDLE,
    ITEM_PURPLE_CANDLE,
    ITEM_BLUE_CANDLE,
    ITEM_BROWN_CANDLE,
    ITEM_GREEN_CANDLE,
    ITEM_RED_CANDLE,
    ITEM_BLACK_CANDLE,
    ITEM_SMALL_AMETHYST_BUD,
    ITEM_MEDIUM_AMETHYST_BUD,
    ITEM_LARGE_AMETHYST_BUD,
    ITEM_AMETHYST_CLUSTER,
    ITEM_POINTED_DRIPSTONE,
    ITEM_OCHRE_FROGLIGHT,
    ITEM_VERDANT_FROGLIGHT,
    ITEM_PEARLESCENT_FROGLIGHT,
    ITEM_FROGSPAWN,
    ITEM_ECHO_SHARD,
    ITEM_BRUSH,
    ITEM_NETHERITE_UPGRADE_SMITHING_TEMPLATE,
    ITEM_SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_DUNE_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_COAST_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_WILD_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_WARD_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_EYE_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_VEX_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_TIDE_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_RIB_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_RAISER_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_HOST_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_FLOW_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_BOLT_ARMOR_TRIM_SMITHING_TEMPLATE,
    ITEM_ANGLER_POTTERY_SHERD,
    ITEM_ARCHER_POTTERY_SHERD,
    ITEM_ARMS_UP_POTTERY_SHERD,
    ITEM_BLADE_POTTERY_SHERD,
    ITEM_BREWER_POTTERY_SHERD,
    ITEM_BURN_POTTERY_SHERD,
    ITEM_DANGER_POTTERY_SHERD,
    ITEM_EXPLORER_POTTERY_SHERD,
    ITEM_FLOW_POTTERY_SHERD,
    ITEM_FRIEND_POTTERY_SHERD,
    ITEM_GUSTER_POTTERY_SHERD,
    ITEM_HEART_POTTERY_SHERD,
    ITEM_HEARTBREAK_POTTERY_SHERD,
    ITEM_HOWL_POTTERY_SHERD,
    ITEM_MINER_POTTERY_SHERD,
    ITEM_MOURNER_POTTERY_SHERD,
    ITEM_PLENTY_POTTERY_SHERD,
    ITEM_PRIZE_POTTERY_SHERD,
    ITEM_SCRAPE_POTTERY_SHERD,
    ITEM_SHEAF_POTTERY_SHERD,
    ITEM_SHELTER_POTTERY_SHERD,
    ITEM_SKULL_POTTERY_SHERD,
    ITEM_SNORT_POTTERY_SHERD,
    ITEM_COPPER_GRATE,
    ITEM_EXPOSED_COPPER_GRATE,
    ITEM_WEATHERED_COPPER_GRATE,
    ITEM_OXIDIZED_COPPER_GRATE,
    ITEM_WAXED_COPPER_GRATE,
    ITEM_WAXED_EXPOSED_COPPER_GRATE,
    ITEM_WAXED_WEATHERED_COPPER_GRATE,
    ITEM_WAXED_OXIDIZED_COPPER_GRATE,
    ITEM_COPPER_BULB,
    ITEM_EXPOSED_COPPER_BULB,
    ITEM_WEATHERED_COPPER_BULB,
    ITEM_OXIDIZED_COPPER_BULB,
    ITEM_WAXED_COPPER_BULB,
    ITEM_WAXED_EXPOSED_COPPER_BULB,
    ITEM_WAXED_WEATHERED_COPPER_BULB,
    ITEM_WAXED_OXIDIZED_COPPER_BULB,
    ITEM_TRIAL_SPAWNER,
    ITEM_TRIAL_KEY,
    ITEM_OMINOUS_TRIAL_KEY,
    ITEM_VAULT,
    ITEM_OMINOUS_BOTTLE,
    ITEM_BREEZE_ROD,
    ITEM_TYPE_COUNT,
};

// @TODO(traks) is_empty function
typedef struct {
    // @NOTE(traks) zero size if and only if type is AIR, because that seems
    // what may be expected
    i32 type;
    u8 size;
} item_stack;

// @TODO(traks) the names are not completely accurate, should improve names once
// we figure out all the actual vanilla uses and start using them ourselves
enum level_event_type {
    LEVEL_EVENT_SOUND_DISPENSER_DISPENSE = 1000,
    LEVEL_EVENT_SOUND_DISPENSER_FAIL = 1001,
    LEVEL_EVENT_SOUND_DISPENSER_PROJECTILE_LAUNCH = 1002,
    LEVEL_EVENT_SOUND_FIREWORK_SHOOT = 1004,
    LEVEL_EVENT_SOUND_EXTINGUISH_FIRE = 1009,
    LEVEL_EVENT_SOUND_PLAY_JUKEBOX_SONG = 1010,
    LEVEL_EVENT_SOUND_STOP_JUKEBOX_SONG = 1011,
    LEVEL_EVENT_SOUND_GHAST_WARNING = 1015,
    LEVEL_EVENT_SOUND_GHAST_FIREBALL = 1016,
    LEVEL_EVENT_SOUND_DRAGON_FIREBALL = 1017,
    LEVEL_EVENT_SOUND_BLAZE_FIREBALL = 1018,
    LEVEL_EVENT_SOUND_ZOMBIE_WOODEN_DOOR = 1019,
    LEVEL_EVENT_SOUND_ZOMBIE_IRON_DOOR = 1020,
    LEVEL_EVENT_SOUND_ZOMBIE_DOOR_CRASH = 1021,
    LEVEL_EVENT_SOUND_WITHER_BLOCK_BREAK = 1022,
    LEVEL_EVENT_SOUND_WITHER_BOSS_SPAWN = 1023,
    LEVEL_EVENT_SOUND_WITHER_BOSS_SHOOT = 1024,
    LEVEL_EVENT_SOUND_BAT_LIFTOFF = 1025,
    LEVEL_EVENT_SOUND_ZOMBIE_INFECTED = 1026,
    LEVEL_EVENT_SOUND_ZOMBIE_CONVERTED = 1027,
    LEVEL_EVENT_SOUND_DRAGON_DEATH = 1028,
    LEVEL_EVENT_SOUND_ANVIL_BROKEN = 1029,
    LEVEL_EVENT_SOUND_ANVIL_USED = 1030,
    LEVEL_EVENT_SOUND_ANVIL_LAND = 1031,
    LEVEL_EVENT_SOUND_PORTAL_TRAVEL = 1032,
    LEVEL_EVENT_SOUND_CHORUS_GROW = 1033,
    LEVEL_EVENT_SOUND_CHORUS_DEATH = 1034,
    LEVEL_EVENT_SOUND_BREWING_STAND_BREW = 1035,
    LEVEL_EVENT_SOUND_END_PORTAL_SPAWN = 1038,
    LEVEL_EVENT_SOUND_PHANTOM_BITE = 1039,
    LEVEL_EVENT_SOUND_ZOMBIE_TO_DROWNED = 1040,
    LEVEL_EVENT_SOUND_HUSK_TO_ZOMBIE = 1041,
    LEVEL_EVENT_SOUND_GRINDSTONE_USED = 1042,
    LEVEL_EVENT_SOUND_PAGE_TURN = 1043,
    LEVEL_EVENT_SOUND_SMITHING_TABLE_USED = 1044,
    LEVEL_EVENT_SOUND_POINTED_DRIPSTONE_LAND = 1045,
    LEVEL_EVENT_SOUND_DRIP_LAVA_INTO_CAULDRON = 1046,
    LEVEL_EVENT_SOUND_DRIP_WATER_INTO_CAULDRON = 1047,
    LEVEL_EVENT_SOUND_SKELETON_TO_STRAY = 1048,
    LEVEL_EVENT_SOUND_CRAFTER_CRAFT = 1049,
    LEVEL_EVENT_SOUND_CRAFTER_FAIL = 1050,
    LEVEL_EVENT_SOUND_WIND_CHARGE_SHOOT = 1051,
    LEVEL_EVENT_COMPOSTER_FILL = 1500,
    LEVEL_EVENT_LAVA_FIZZ = 1501,
    LEVEL_EVENT_REDSTONE_TORCH_BURNOUT = 1502,
    LEVEL_EVENT_END_PORTAL_FRAME_FILL = 1503,
    LEVEL_EVENT_DRIPSTONE_DRIP = 1504,
    LEVEL_EVENT_PARTICLES_AND_SOUND_PLANT_GROWTH = 1505,
    LEVEL_EVENT_PARTICLES_SHOOT_SMOKE = 2000,
    LEVEL_EVENT_PARTICLES_DESTROY_BLOCK = 2001,
    LEVEL_EVENT_PARTICLES_SPELL_POTION_SPLASH = 2002,
    LEVEL_EVENT_PARTICLES_EYE_OF_ENDER_DEATH = 2003,
    LEVEL_EVENT_PARTICLES_MOBBLOCK_SPAWN = 2004,
    LEVEL_EVENT_PARTICLES_DRAGON_FIREBALL_SPLASH = 2006,
    LEVEL_EVENT_PARTICLES_INSTANT_POTION_SPLASH = 2007,
    LEVEL_EVENT_PARTICLES_DRAGON_BLOCK_BREAK = 2008,
    LEVEL_EVENT_PARTICLES_WATER_EVAPORATING = 2009,
    LEVEL_EVENT_PARTICLES_SHOOT_WHITE_SMOKE = 2010,
    LEVEL_EVENT_PARTICLES_BEE_GROWTH = 2011,
    LEVEL_EVENT_PARTICLES_TURTLE_EGG_PLACEMENT = 2012,
    LEVEL_EVENT_PARTICLES_SMASH_ATTACK = 2013,
    LEVEL_EVENT_ANIMATION_END_GATEWAY_SPAWN = 3000,
    LEVEL_EVENT_ANIMATION_DRAGON_SUMMON_ROAR = 3001,
    LEVEL_EVENT_PARTICLES_ELECTRIC_SPARK = 3002,
    LEVEL_EVENT_PARTICLES_AND_SOUND_WAX_ON = 3003,
    LEVEL_EVENT_PARTICLES_WAX_OFF = 3004,
    LEVEL_EVENT_PARTICLES_SCRAPE = 3005,
    LEVEL_EVENT_PARTICLES_SCULK_CHARGE = 3006,
    LEVEL_EVENT_PARTICLES_SCULK_SHRIEK = 3007,
    LEVEL_EVENT_PARTICLES_AND_SOUND_BRUSH_BLOCK_COMPLETE = 3008,
    LEVEL_EVENT_PARTICLES_EGG_CRACK = 3009,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_SPAWN = 3011,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_SPAWN_MOB_AT = 3012,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_DETECT_PLAYER = 3013,
    LEVEL_EVENT_ANIMATION_TRIAL_SPAWNER_EJECT_ITEM = 3014,
    LEVEL_EVENT_ANIMATION_VAULT_ACTIVATE = 3015,
    LEVEL_EVENT_ANIMATION_VAULT_DEACTIVATE = 3016,
    LEVEL_EVENT_ANIMATION_VAULT_EJECT_ITEM = 3017,
    LEVEL_EVENT_ANIMATION_SPAWN_COBWEB = 3018,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_DETECT_PLAYER_OMINOUS = 3019,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_BECOME_OMINOUS = 3020,
    LEVEL_EVENT_PARTICLES_TRIAL_SPAWNER_SPAWN_ITEM = 3021,
};

// NOTE(traks): generated in network order
enum entity_type {
    ENTITY_ALLAY,
    ENTITY_AREA_EFFECT_CLOUD,
    ENTITY_ARMADILLO,
    ENTITY_ARMOR_STAND,
    ENTITY_ARROW,
    ENTITY_AXOLOTL,
    ENTITY_BAT,
    ENTITY_BEE,
    ENTITY_BLAZE,
    ENTITY_BLOCK_DISPLAY,
    ENTITY_BOAT,
    ENTITY_BOGGED,
    ENTITY_BREEZE,
    ENTITY_BREEZE_WIND_CHARGE,
    ENTITY_CAMEL,
    ENTITY_CAT,
    ENTITY_CAVE_SPIDER,
    ENTITY_CHEST_BOAT,
    ENTITY_CHEST_MINECART,
    ENTITY_CHICKEN,
    ENTITY_COD,
    ENTITY_COMMAND_BLOCK_MINECART,
    ENTITY_COW,
    ENTITY_CREEPER,
    ENTITY_DOLPHIN,
    ENTITY_DONKEY,
    ENTITY_DRAGON_FIREBALL,
    ENTITY_DROWNED,
    ENTITY_EGG,
    ENTITY_ELDER_GUARDIAN,
    ENTITY_END_CRYSTAL,
    ENTITY_ENDER_DRAGON,
    ENTITY_ENDER_PEARL,
    ENTITY_ENDERMAN,
    ENTITY_ENDERMITE,
    ENTITY_EVOKER,
    ENTITY_EVOKER_FANGS,
    ENTITY_EXPERIENCE_BOTTLE,
    ENTITY_EXPERIENCE_ORB,
    ENTITY_EYE_OF_ENDER,
    ENTITY_FALLING_BLOCK,
    ENTITY_FIREWORK_ROCKET,
    ENTITY_FOX,
    ENTITY_FROG,
    ENTITY_FURNACE_MINECART,
    ENTITY_GHAST,
    ENTITY_GIANT,
    ENTITY_GLOW_ITEM_FRAME,
    ENTITY_GLOW_SQUID,
    ENTITY_GOAT,
    ENTITY_GUARDIAN,
    ENTITY_HOGLIN,
    ENTITY_HOPPER_MINECART,
    ENTITY_HORSE,
    ENTITY_HUSK,
    ENTITY_ILLUSIONER,
    ENTITY_INTERACTION,
    ENTITY_IRON_GOLEM,
    ENTITY_ITEM,
    ENTITY_ITEM_DISPLAY,
    ENTITY_ITEM_FRAME,
    ENTITY_OMINOUS_ITEM_SPAWNER,
    ENTITY_FIREBALL,
    ENTITY_LEASH_KNOT,
    ENTITY_LIGHTNING_BOLT,
    ENTITY_LLAMA,
    ENTITY_LLAMA_SPIT,
    ENTITY_MAGMA_CUBE,
    ENTITY_MARKER,
    ENTITY_MINECART,
    ENTITY_MOOSHROOM,
    ENTITY_MULE,
    ENTITY_OCELOT,
    ENTITY_PAINTING,
    ENTITY_PANDA,
    ENTITY_PARROT,
    ENTITY_PHANTOM,
    ENTITY_PIG,
    ENTITY_PIGLIN,
    ENTITY_PIGLIN_BRUTE,
    ENTITY_PILLAGER,
    ENTITY_POLAR_BEAR,
    ENTITY_POTION,
    ENTITY_PUFFERFISH,
    ENTITY_RABBIT,
    ENTITY_RAVAGER,
    ENTITY_SALMON,
    ENTITY_SHEEP,
    ENTITY_SHULKER,
    ENTITY_SHULKER_BULLET,
    ENTITY_SILVERFISH,
    ENTITY_SKELETON,
    ENTITY_SKELETON_HORSE,
    ENTITY_SLIME,
    ENTITY_SMALL_FIREBALL,
    ENTITY_SNIFFER,
    ENTITY_SNOW_GOLEM,
    ENTITY_SNOWBALL,
    ENTITY_SPAWNER_MINECART,
    ENTITY_SPECTRAL_ARROW,
    ENTITY_SPIDER,
    ENTITY_SQUID,
    ENTITY_STRAY,
    ENTITY_STRIDER,
    ENTITY_TADPOLE,
    ENTITY_TEXT_DISPLAY,
    ENTITY_TNT,
    ENTITY_TNT_MINECART,
    ENTITY_TRADER_LLAMA,
    ENTITY_TRIDENT,
    ENTITY_TROPICAL_FISH,
    ENTITY_TURTLE,
    ENTITY_VEX,
    ENTITY_VILLAGER,
    ENTITY_VINDICATOR,
    ENTITY_WANDERING_TRADER,
    ENTITY_WARDEN,
    ENTITY_WIND_CHARGE,
    ENTITY_WITCH,
    ENTITY_WITHER,
    ENTITY_WITHER_SKELETON,
    ENTITY_WITHER_SKULL,
    ENTITY_WOLF,
    ENTITY_ZOGLIN,
    ENTITY_ZOMBIE,
    ENTITY_ZOMBIE_HORSE,
    ENTITY_ZOMBIE_VILLAGER,
    ENTITY_ZOMBIFIED_PIGLIN,
    ENTITY_PLAYER,
    ENTITY_FISHING_BOBBER,
    ENTITY_NULL, // not used in vanilla
    ENTITY_TYPE_COUNT,
};

#define ENTITY_INDEX_MASK (MAX_ENTITIES - 1)

// Top 12 bits are used for the generation, lowest 20 bits can be used for the
// index into the entity table. Bits actually used for the index depends on
// MAX_ENTITIES.
static_assert(MAX_ENTITIES <= (1UL << 20), "MAX_ENTITIES too large");
typedef u32 entity_id;

// NOTE(traks): in network order
enum entity_pose {
    ENTITY_POSE_STANDING,
    ENTITY_POSE_FALL_FLYING,
    ENTITY_POSE_SLEEPING,
    ENTITY_POSE_SWIMMING,
    ENTITY_POSE_SPIN_ATTACK,
    ENTITY_POSE_CROUCHING,
    ENTITY_POSE_LONG_JUMPING,
    ENTITY_POSE_DYING,
    ENTITY_POSE_CROAKING,
    ENTITY_POSE_USING_TONGUE,
    ENTITY_POSE_SITTING,
    ENTITY_POSE_ROARING,
    ENTITY_POSE_SNIFFING,
    ENTITY_POSE_EMERGING,
    ENTITY_POSE_DIGGING,
    ENTITY_POSE_SLIDING,
    ENTITY_POSE_SHOOTING,
    ENTITY_POSE_INHALING,
};

enum packet_game_event_type {
    PACKET_GAME_EVENT_NO_RESPAWN_BLOCK_AVAILABLE,
    PACKET_GAME_EVENT_START_RAINING,
    PACKET_GAME_EVENT_STOP_RAINING,
    PACKET_GAME_EVENT_CHANGE_GAME_MODE,
    PACKET_GAME_EVENT_WIN_GAME,
    PACKET_GAME_EVENT_DEMO_EVENT,
    PACKET_GAME_EVENT_ARROW_HIT_PLAYER,
    PACKET_GAME_EVENT_RAIN_LEVEL_CHANGE,
    PACKET_GAME_EVENT_THUNDER_LEVEL_CHANGE,
    PACKET_GAME_EVENT_PUFFER_FISH_STING,
    PACKET_GAME_EVENT_GUARDIAN_ELDER_EFFECT,
    PACKET_GAME_EVENT_IMMEDIATE_RESPAWN,
    PACKET_GAME_EVENT_LIMITED_CRAFTING,
    PACKET_GAME_EVENT_LEVEL_CHUNKS_LOAD_START,
};

enum entity_data_type {
    ENTITY_DATA_TYPE_BYTE,
    ENTITY_DATA_TYPE_INT,
    ENTITY_DATA_TYPE_LONG,
    ENTITY_DATA_TYPE_FLOAT,
    ENTITY_DATA_TYPE_STRING,
    ENTITY_DATA_TYPE_COMPONENT,
    ENTITY_DATA_TYPE_OPTIONAL_COMPONENT,
    ENTITY_DATA_TYPE_ITEM_STACK,
    ENTITY_DATA_TYPE_BOOL,
    ENTITY_DATA_TYPE_ROTATIONS,
    ENTITY_DATA_TYPE_BLOCK_POS,
    ENTITY_DATA_TYPE_OPTIONAL_BLOCK_POS,
    ENTITY_DATA_TYPE_DIRECTION,
    ENTITY_DATA_TYPE_OPTIONAL_UUID,
    ENTITY_DATA_TYPE_BLOCK_STATE,
    ENTITY_DATA_TYPE_OPTIONAL_BLOCK_STATE,
    ENTITY_DATA_TYPE_NBT,
    ENTITY_DATA_TYPE_PARTICLE,
    ENTITY_DATA_TYPE_PARTICLES,
    ENTITY_DATA_TYPE_VILLAGER_DATA,
    ENTITY_DATA_TYPE_OPTIONAL_UINT,
    ENTITY_DATA_TYPE_POSE,
    ENTITY_DATA_CAT_VARIANT,
    ENTITY_DATA_FROG_VARIANT,
    ENTITY_DATA_OPTIONAL_GLOBAL_POS,
    ENTITY_DATA_PAINTING_VARIANT,
    ENTITY_DATA_SNIFFER_STATE,
    ENTITY_DATA_VECTOR3,
    ENTITY_DATA_QUATERNION,
};

enum entity_data {
    ENTITY_DATA_FLAGS,
    ENTITY_DATA_AIR_SUPPLY,
    ENTITY_DATA_CUSTOM_NAME,
    ENTITY_DATA_CUSTOM_NAME_VISIBLE,
    ENTITY_DATA_SILENT,
    ENTITY_DATA_NO_GRAVITY,
    ENTITY_DATA_POSE,
    ENTITY_DATA_FROZEN_TICKS,
    ENTITY_DATA_BASE_NEXT,

    // living entity data
    ENTITY_DATA_LIVING_FLAGS = ENTITY_DATA_BASE_NEXT,
    ENTITY_DATA_HEALTH,
    ENTITY_DATA_EFFECT_COLOUR,
    ENTITY_DATA_EFFECT_AMBIENCE,
    ENTITY_DATA_ARROW_COUNT,
    ENTITY_DATA_BEE_STINGER_COUNT,
    ENTITY_DATA_SLEEPING_POS,
    ENTITY_DATA_LIVING_NEXT,

    // item entity data
    ENTITY_DATA_ITEM = ENTITY_DATA_BASE_NEXT,

    // player data
    ENTITY_DATA_ABSORPTION = ENTITY_DATA_LIVING_NEXT,
    ENTITY_DATA_SCORE,
    ENTITY_DATA_SKIN_CUSTOMISATION,
    ENTITY_DATA_MAIN_HAND,
    ENTITY_DATA_LEFT_SHOULDER_ENTITY,
    ENTITY_DATA_RIGHT_SHOULDER_ENTITY,
};

// NOTE(traks): generated in network order
enum game_event {
    GAME_EVENT_BLOCK_ACTIVATE,
    GAME_EVENT_BLOCK_ATTACH,
    GAME_EVENT_BLOCK_CHANGE,
    GAME_EVENT_BLOCK_CLOSE,
    GAME_EVENT_BLOCK_DEACTIVATE,
    GAME_EVENT_BLOCK_DESTROY,
    GAME_EVENT_BLOCK_DETACH,
    GAME_EVENT_BLOCK_OPEN,
    GAME_EVENT_BLOCK_PLACE,
    GAME_EVENT_CONTAINER_CLOSE,
    GAME_EVENT_CONTAINER_OPEN,
    GAME_EVENT_DRINK,
    GAME_EVENT_EAT,
    GAME_EVENT_ELYTRA_GLIDE,
    GAME_EVENT_ENTITY_DAMAGE,
    GAME_EVENT_ENTITY_DIE,
    GAME_EVENT_ENTITY_DISMOUNT,
    GAME_EVENT_ENTITY_INTERACT,
    GAME_EVENT_ENTITY_MOUNT,
    GAME_EVENT_ENTITY_PLACE,
    GAME_EVENT_ENTITY_ACTION,
    GAME_EVENT_EQUIP,
    GAME_EVENT_EXPLODE,
    GAME_EVENT_FLAP,
    GAME_EVENT_FLUID_PICKUP,
    GAME_EVENT_FLUID_PLACE,
    GAME_EVENT_HIT_GROUND,
    GAME_EVENT_INSTRUMENT_PLAY,
    GAME_EVENT_ITEM_INTERACT_FINISH,
    GAME_EVENT_ITEM_INTERACT_START,
    GAME_EVENT_JUKEBOX_PLAY,
    GAME_EVENT_JUKEBOX_STOP_PLAY,
    GAME_EVENT_LIGHTNING_STRIKE,
    GAME_EVENT_NOTE_BLOCK_PLAY,
    GAME_EVENT_PRIME_FUSE,
    GAME_EVENT_PROJECTILE_LAND,
    GAME_EVENT_PROJECTILE_SHOOT,
    GAME_EVENT_SCULK_SENSOR_TENDRILS_CLICKING,
    GAME_EVENT_SHEAR,
    GAME_EVENT_SHRIEK,
    GAME_EVENT_SPLASH,
    GAME_EVENT_STEP,
    GAME_EVENT_SWIM,
    GAME_EVENT_TELEPORT,
    GAME_EVENT_UNEQUIP,
    GAME_EVENT_RESONATE_1,
    GAME_EVENT_RESONATE_2,
    GAME_EVENT_RESONATE_3,
    GAME_EVENT_RESONATE_4,
    GAME_EVENT_RESONATE_5,
    GAME_EVENT_RESONATE_6,
    GAME_EVENT_RESONATE_7,
    GAME_EVENT_RESONATE_8,
    GAME_EVENT_RESONATE_9,
    GAME_EVENT_RESONATE_10,
    GAME_EVENT_RESONATE_11,
    GAME_EVENT_RESONATE_12,
    GAME_EVENT_RESONATE_13,
    GAME_EVENT_RESONATE_14,
    GAME_EVENT_RESONATE_15,
    GAME_EVENT_TYPE_COUNT,
};

// @TODO(traks) Should we really be storing crafting grid + result slot on the
// player? The vanilla MC server considers the inventory menu always 'open'
// unless some other menu is explicitly opened. The client also doesn't send an
// 'inventory open' packet if the client opens their inventory.
//
// Perhaps we should model inventory and crafting grid + result slot separately
// into a menu as well. Would make more sense when a player has another menu
// open. There are also some issues with syncing inventory menu changes to the
// client if they have another menu open.
//
// For menus we should also model the cursor item as a slot, so you can just
// loop over all slots to check whether a menu contains an item.
//
// If no menu is explicitly opened, the default open menu would just be the
// inventory menu.

// Player inventory menu slots are indexed as follows:
//
//  0           the crafting grid result slot
//  1-4         the 2x2 crafting grid slots
//  5-8         the 4 armour slots
//  9-35        the 36 main inventory slots
//  36-44       hotbar slots
//  45          off hand slot
//
// Here are some defines for convenience.
#define PLAYER_SLOTS (46)
#define PLAYER_FIRST_MAIN_INV_SLOT (9)
#define PLAYER_LAST_MAIN_INV_SLOT (35)
#define PLAYER_FIRST_HOTBAR_SLOT (36)
#define PLAYER_LAST_HOTBAR_SLOT (44)
#define PLAYER_OFF_HAND_SLOT (45)

#define PLAYER_CHUNK_SENT (0x1 << 0)
#define PLAYER_CHUNK_ADDED_INTEREST (0x1 << 1)

typedef struct {
    u8 flags;
} PlayerChunkCacheEntry;

typedef struct {
    entity_id eid;

    i64 last_tp_packet_tick;
    i64 last_send_pos_tick;
    i64 last_update_tick;

    unsigned char update_interval;

    double last_sent_x;
    double last_sent_y;
    double last_sent_z;

    // these are always 0 for some entities
    unsigned char last_sent_rot_x;
    unsigned char last_sent_rot_y;
    unsigned char last_sent_head_rot_y;
} tracked_entity;

typedef struct {
    unsigned char username[16];
    int username_size;

    item_stack slots_prev_tick[PLAYER_SLOTS];
    item_stack slots[PLAYER_SLOTS];
    static_assert(PLAYER_SLOTS <= 64, "Too many player slots");
    u64 slots_needing_update;
    unsigned char selected_slot;

    entity_id picked_up_item_id;
    u8 picked_up_item_size;
    i64 picked_up_tick;

    unsigned char gamemode;

    // @NOTE(traks) the server doesn't tell clients the body rotation of
    // players. The client determines the body rotation based on the player's
    // movement and their head rotation. However, we do need to send a players
    // head rotation using the designated packet, otherwise heads won't rotate.

    int sock;
    unsigned char * rec_buf;
    int rec_buf_size;
    int rec_cursor;

    unsigned char * send_buf;
    int send_buf_size;
    int send_cursor;

    // NOTE(traks): Render/view distance is the client setting. It doesn't
    // include the chunk at the centre, and doesn't include an extra outer
    // border that's used for lighting, connected blocks like chests, etc. The
    // chunk cache radius FOR US does include the extra outer border.
    i32 chunkCacheRadius;
    i32 nextChunkCacheRadius;
    i32 chunkCacheCentreX;
    i32 chunkCacheCentreZ;
    // @TODO(traks) maybe this should just be a bitmap
    PlayerChunkCacheEntry chunkCache[MAX_CHUNK_CACHE_DIAM * MAX_CHUNK_CACHE_DIAM];

    i32 current_teleport_id;

    u8 locale[MAX_PLAYER_LOCALE_SIZE];
    i32 localeSize;
    i32 chatMode;
    i32 seesChatColours;
    u8 skinCustomisation;
    i32 mainHand;
    i32 textFiltering;
    i32 showInStatusList;

    i64 last_keep_alive_sent_tick;

    entity_id eid;

    // @TODO(traks) this feels a bit silly, but very simple
    tracked_entity tracked_entities[MAX_ENTITIES];

    WorldBlockPos changed_blocks[8];
    u8 changed_block_count;

    // @NOTE(traks) -1 if nothing to acknowledge
    i32 lastAckedBlockChange;
} entity_player;

typedef struct {
    // entity data
    item_stack contents;
    // minecraft calls this pickup delay. If equal to 32767, this item can't
    // ever be picked up (by players, foxes, etc.)
    i16 pickup_timeout;
} entity_item;

#define ENTITY_IN_USE ((unsigned) (1 << 0))
#define ENTITY_TELEPORTING ((unsigned) (1 << 1))
#define ENTITY_ON_GROUND ((unsigned) (1 << 2))
#define ENTITY_CUSTOM_NAME_VISIBLE ((unsigned) (1 << 3))
#define ENTITY_NO_GRAVITY ((unsigned) (1 << 4))
#define ENTITY_SILENT ((unsigned) (1 << 5))
#define ENTITY_GLOWING ((unsigned) (1 << 6))
#define ENTITY_INVISIBLE ((unsigned) (1 << 7))
#define ENTITY_INVULNERABLE ((unsigned) (1 << 8))
#define ENTITY_VISUAL_FIRE ((unsigned) (1 << 9))
#define ENTITY_SHIFTING ((unsigned) (1 << 10))
#define ENTITY_SPRINTING ((unsigned) (1 << 11))
#define ENTITY_SWIMMING ((unsigned) (1 << 12))

// living entities only
#define ENTITY_FALL_FLYING ((unsigned) (1 << 13))

#define LIVING_EFFECT_AMBIENCE ((unsigned) (1 << 14))

#define PLAYER_DID_INIT_PACKETS ((unsigned) (1 << 16))
#define PLAYER_SENT_TELEPORT ((unsigned) (1 << 17))
#define PLAYER_GOT_ALIVE_RESPONSE ((unsigned) (1 << 18))
#define PLAYER_INITIALISED_TAB_LIST ((unsigned) (1 << 19))
#define PLAYER_PACKET_COMPRESSION ((unsigned) (1 << 20))
#define PLAYER_SPIN_ATTACKING ((unsigned) (1 << 21))
#define PLAYER_FLYING ((unsigned) (1 << 22))
#define PLAYER_CAN_FLY ((unsigned) (1 << 23))
#define PLAYER_INSTABUILD ((unsigned) (1 << 24))
#define PLAYER_CAN_BUILD ((unsigned) (1 << 25))

#define PLAYER_ABILITIES_CHANGED ((u64) (1ULL << 32))
#define PLAYER_GAMEMODE_CHANGED ((u64) (1ULL << 33))

// NOTE(traks): variable entity metadata we need to support for protocol stuff:
// - custom names
// - inventory items (arbitrary nbt data) (mobs, but also ender pearls, etc.)
// - player left/right shoulder parrot nbt
// - minecart command block command + last output
//
// For the implementation we need more variable data:
// - data for plugins
// - passengers
// - entity tags (used in datapacks)
// - list of applied effects
// - list of entity collision exemptions?
// - crazy vanilla brain stuff
// - ???

typedef struct {
    entity_id eid;
    unsigned type;
    i32 worldId;

    UUID uuid;

    // centre of bottom of entity's bounding box
    double x;
    double y;
    double z;

    // for players the head rotation
    // not used for items

    // @NOTE(traks) these values shouldn't exceed the range [0, 360] by too
    // much, otherwise float -> integer conversion errors may occur.
    float rot_x;
    float rot_y;

    // velocity, not used for players
    double vx;
    double vy;
    double vz;

    double collision_width;
    double collision_height;

    // Bottom 32 bits for changed entity data: bit position equals entity data
    // id. Top 32 bits for other things. This is used to send packets with the
    // most up-to-date data.
    u64 changed_data;

    // entity data
    unsigned flags;
    i32 air_supply;
    unsigned char pose;
    i32 effect_colour; // living entities

    union {
        entity_player player;
        entity_item item;
    };
} entity_base;

typedef struct {
    u16 size;
    unsigned char text[512];
} global_msg;

typedef struct {
    // index into string buffer for name size + value
    int name_index;
    int value_count;
    // index into value id buffer for array of values
    int values_index;
} tag_spec;

typedef struct {
    // resource location identifier of this tag list
    unsigned char name_size;
    unsigned char name[32];
    // number of tags
    int size;
    tag_spec tags[190];
} tag_list;

#define RESOURCE_LOC_MAX_SIZE (256)

typedef struct {
    unsigned char size;
    u16 id;
    u32 buf_index;
} resource_loc_entry;

typedef struct {
    i32 size_mask;
    i32 string_buf_size;
    resource_loc_entry * entries;
    unsigned char * string_buf;
    i32 last_string_buf_index;

    u16 * by_id;
    u16 max_ids;
} resource_loc_table;

typedef struct {
    WorldBlockPos pos;
    int from_direction;
    i64 for_tick;
} scheduled_block_update;

typedef struct {
    WorldBlockPos pos;
    unsigned char from_direction;
} block_update;

typedef struct {
    block_update * blocks_to_update;
    int update_count;
    int max_updates;
} block_update_context;

typedef struct {
    i64 current_tick;
    i64 currentTickStartNanos;

    entity_base entities[MAX_ENTITIES];
    u16 next_entity_generations[MAX_ENTITIES];
    i32 entity_count;

    // global messages for the current tick
    global_msg global_msgs[16];
    int global_msg_count;

    void * short_lived_scratch;
    i32 short_lived_scratch_size;

    // TODO(traks): make sure we don't overflow these and choose good defaults.
    // How many tab list changes do we want to allow per tick?
    entity_id tab_list_added[1024];
    int tab_list_added_count;
    entity_id tab_list_removed[1024];
    int tab_list_removed_count;
    entity_id tab_list[MAX_PLAYERS];
    int tab_list_size;

    tag_list block_tags;
    tag_list entity_tags;
    tag_list fluid_tags;
    tag_list item_tags;
    tag_list game_event_tags;
    // total number of tag keys
    int tag_name_count;
    // total number of values
    int tag_value_id_count;
    // buffer for the tag keys in the tag lists
    unsigned char tag_name_buf[1 << 14];
    // buffer for the lists of values associated to the tag keys
    u16 tag_value_id_buf[1 << 13];

    resource_loc_table block_resource_table;
    resource_loc_table item_resource_table;
    resource_loc_table entity_resource_table;
    resource_loc_table fluid_resource_table;
    resource_loc_table game_event_resource_table;

    block_properties block_properties_table[ACTUAL_BLOCK_TYPE_COUNT];
    int block_type_count;
    int vanilla_block_state_count;
    int actual_block_state_count;
    block_property_spec block_property_specs[BLOCK_PROPERTY_COUNT];
    BlockModel staticBlockModels[BLOCK_MODEL_COUNT];
    u8 collisionModelByState[MAX_BLOCK_STATES];
    u8 supportModelByState[MAX_BLOCK_STATES];
    u8 lightBlockingModelByState[MAX_BLOCK_STATES];
    u8 lightReductionByState[MAX_BLOCK_STATES];
    u8 emittedLightByState[MAX_BLOCK_STATES];
    BlockBehaviours blockBehavioursByType[ACTUAL_BLOCK_TYPE_COUNT];
    u8 lightCanPropagate[BLOCK_MODEL_COUNT * BLOCK_MODEL_COUNT];

    // block state -> block type
    u16 block_type_by_state[MAX_BLOCK_STATES];

    // @TODO(traks) this is the simplest but dumbest thing. Should really store
    // this per chunk, since we need to save it when chunk is unloaded. Limit
    // should also be way higher.

    // @TODO(traks) remove scheduled block updates when a block changes or the
    // chunk gets unloaded? Not sure if it really matters if a block gets
    // updated 'unexpectedly'. What is the worst thing that could happen?
    scheduled_block_update scheduled_block_updates[100];
    int scheduled_block_update_count;

    MemoryArena * tickArena;
    MemoryArena * permanentArena;

    TaskQueue * backgroundQueue;
} server;

extern server * serv;

// in network order
enum player_hand {
    PLAYER_MAIN_HAND,
    PLAYER_OFF_HAND,
};

int
find_property_value_index(block_property_spec * prop_spec, String val);

block_entity_base *
try_get_block_entity(WorldBlockPos pos);

entity_base *
resolve_entity(entity_id eid);

entity_base *
try_reserve_entity(unsigned type);

void
evict_entity(entity_id eid);

void
teleport_player(entity_base * entity,
        double new_x, double new_y, double new_z,
        float new_rot_x, float new_rot_y);

void
set_player_gamemode(entity_base * player, int new_gamemode);

void
add_stack_to_player_inventory(entity_base * player, item_stack * to_add);

void
tick_player(entity_base * entity, MemoryArena * tick_arena);

void
send_packets_to_player(entity_base * entity, MemoryArena * tick_arena);

void
register_resource_loc(String resource_loc, i16 id,
        resource_loc_table * table);

i16
resolve_resource_loc_id(String resource_loc, resource_loc_table * table);

String
get_resource_loc(u16 id, resource_loc_table * table);

int
net_string_equal(String a, String b);

void
process_use_item_on_packet(entity_base * player,
        i32 hand, BlockPos packetClickedPos, i32 clicked_face,
        float click_offset_x, float click_offset_y, float click_offset_z,
        u8 is_inside, MemoryArena * scratch_arena);

int
use_block(entity_base * player,
        i32 hand, WorldBlockPos clicked_pos, i32 clicked_face,
        float click_offset_x, float click_offset_y, float click_offset_z,
        u8 is_inside, block_update_context * buc);

u8
get_max_stack_size(i32 item_type);

void
propagate_delayed_block_updates(MemoryArena * scratch_arena);

void
propagate_block_updates(block_update_context * buc);

BlockPos
get_relative_block_pos(BlockPos pos, int face);

static inline WorldBlockPos WorldBlockPosRel(WorldBlockPos pos, i32 face) {
    WorldBlockPos res = {.worldId = pos.worldId, .xyz = get_relative_block_pos(pos.xyz, face)};
    return res;
}

int
update_redstone_wire(WorldBlockPos pos, u16 in_world_state,
        block_state_info * base_info, block_update_context * buc);

int
get_opposite_direction(int direction);

int
get_direction_axis(int direction);

void
init_item_data(void);

void
update_stairs_shape(WorldBlockPos pos, block_state_info * cur_info);

void
update_pane_shape(WorldBlockPos pos,
        block_state_info * cur_info, int from_direction);

void
update_fence_shape(WorldBlockPos pos,
        block_state_info * cur_info, int from_direction);

void
update_wall_shape(WorldBlockPos pos,
        block_state_info * cur_info, int from_direction);

int
get_player_facing(entity_base * player);

void
push_direct_neighbour_block_updates(WorldBlockPos pos,
        block_update_context * buc);

static inline i32 FindLightCanPropagate(i32 fromState, i32 toState, i32 dir) {
    i32 fromModelIndex = serv->lightBlockingModelByState[fromState];
    i32 toModelIndex = serv->lightBlockingModelByState[toState];
    return (serv->lightCanPropagate[fromModelIndex * BLOCK_MODEL_COUNT + toModelIndex] >> dir) & 0x1;
}

// math

static i32 CeilLog2U32(u32 x) {
    assert(x != 0);
    u64 y = x;
    y = 2 * y - 1;
    i32 res = 63 - __builtin_clzll(y);
    return res;
}

#endif
